;;;; Serene
;;; com.paren/serene
;;; https://github.com/paren-com/serene
;;; Generate clojure.spec with GraphQL and extend GraphQL with clojure.spec
;;;
;;; DO NOT EDIT THIS FILE!

(ns gql.git-lab-specs (:require [clojure.core] [clojure.spec.alpha]))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.projects/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Group.projects/after
    :gql.git-lab-specs.Group.projects/before
    :gql.git-lab-specs.Group.projects/first
    :gql.git-lab-specs.Group.projects/includeSubgroups
    :gql.git-lab-specs.Group.projects/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository.empty/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/group
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Group))

(clojure.spec.alpha/def :gql.git-lab-specs/Commit
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Commit/author
    :gql.git-lab-specs.Commit/authorName
    :gql.git-lab-specs.Commit/authoredDate
    :gql.git-lab-specs.Commit/description
    :gql.git-lab-specs.Commit/id
    :gql.git-lab-specs.Commit/latestPipeline
    :gql.git-lab-specs.Commit/message
    :gql.git-lab-specs.Commit/pipelines
    :gql.git-lab-specs.Commit/sha
    :gql.git-lab-specs.Commit/signatureHtml
    :gql.git-lab-specs.Commit/title
    :gql.git-lab-specs.Commit/webUrl
    :gql.git-lab-specs.Commit/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.discussions/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue/__typename #{"__InputValue"})

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetPayload/snippet
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Snippet))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSort/DUE_DATE_DESC #{"DUE_DATE_DESC"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/forceRemoveSourceBranch
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.fullPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetPayload.snippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.latestPipeline/sha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/MarkAsSpamSnippetPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MarkAsSpamSnippetPayload/clientMutationId
    :gql.git-lab-specs.MarkAsSpamSnippetPayload/errors
    :gql.git-lab-specs.MarkAsSpamSnippetPayload/snippet
    :gql.git-lab-specs.MarkAsSpamSnippetPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.state/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/IssuableState
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :IssuableState/closed
    :gql.git-lab-specs.IssuableState/closed
    :IssuableState/locked
    :gql.git-lab-specs.IssuableState/locked
    :IssuableState/opened
    :gql.git-lab-specs.IssuableState/opened)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.sshUrlToRepo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.tagList/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/newLine
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.positionType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.discussions/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Noteable.discussions/after
    :gql.git-lab-specs.Noteable.discussions/before
    :gql.git-lab-specs.Noteable.discussions/first
    :gql.git-lab-specs.Noteable.discussions/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.fullName/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/BlobConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.BlobConnection/edges
    :gql.git-lab-specs.BlobConnection/nodes
    :gql.git-lab-specs.BlobConnection/pageInfo
    :gql.git-lab-specs.BlobConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs/CreateImageDiffNotePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.CreateImageDiffNotePayload/clientMutationId
    :gql.git-lab-specs.CreateImageDiffNotePayload/errors
    :gql.git-lab-specs.CreateImageDiffNotePayload/note
    :gql.git-lab-specs.CreateImageDiffNotePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.projects/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.notes/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions/__typename #{"SnippetPermissions"})

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.title/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Label/descriptionHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNotePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoActionEnum/directly_addressed
  #{"directly_addressed"})

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDatePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/TodoEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.title/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/firstReleaseLastCommit
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiPayload/__typename
  #{"RemoveAwardEmojiPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/lfsOid
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/latestPipeline
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Pipeline))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/mergeCommitSha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.trees/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.User.snippets/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestState/closed #{"closed"})

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/RootStorageStatistics
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.RootStorageStatistics/buildArtifactsSize
    :gql.git-lab-specs.RootStorageStatistics/lfsObjectsSize
    :gql.git-lab-specs.RootStorageStatistics/packagesSize
    :gql.git-lab-specs.RootStorageStatistics/repositorySize
    :gql.git-lab-specs.RootStorageStatistics/storageSize
    :gql.git-lab-specs.RootStorageStatistics/wikiSize
    :gql.git-lab-specs.RootStorageStatistics/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetPayload/snippet
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Snippet))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.labels/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/todosMarkAllDone
  (clojure.spec.alpha/nilable :gql.git-lab-specs/TodosMarkAllDonePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions.readNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestorePayload/__typename #{"TodoRestorePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDatePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository.tree/path
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.status/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDonePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/User
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.User/avatarUrl
    :gql.git-lab-specs.User/name
    :gql.git-lab-specs.User/snippets
    :gql.git-lab-specs.User/todos
    :gql.git-lab-specs.User/userPermissions
    :gql.git-lab-specs.User/username
    :gql.git-lab-specs.User/webUrl
    :gql.git-lab-specs.User/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetAssignees/&args
  (clojure.spec.alpha/keys
   :opt-un
   []
   :req-un
   [:gql.git-lab-specs.Mutation.mergeRequestSetAssignees/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.currentUser/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.body/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionConnection/__typename
  #{"DiscussionConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.Label.title/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/issue
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Issue))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionPayload/__typename
  #{"MergeRequestSetSubscriptionPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPathsInput/newPath
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/SCHEDULED #{"SCHEDULED"})

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetAssigneesPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetAssigneesPayload/clientMutationId
    :gql.git-lab-specs.MergeRequestSetAssigneesPayload/errors
    :gql.git-lab-specs.MergeRequestSetAssigneesPayload/mergeRequest
    :gql.git-lab-specs.MergeRequestSetAssigneesPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/inputFields
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/__InputValue :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/issues
  (clojure.spec.alpha/nilable :gql.git-lab-specs/IssueConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/mergeStatus
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.User.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNotePayload.note/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/__typename #{"Todo"})

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestState
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :MergeRequestState/closed
    :gql.git-lab-specs.MergeRequestState/closed
    :MergeRequestState/locked
    :gql.git-lab-specs.MergeRequestState/locked
    :MergeRequestState/merged
    :gql.git-lab-specs.MergeRequestState/merged
    :MergeRequestState/opened
    :gql.git-lab-specs.MergeRequestState/opened)))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetMilestonePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetMilestonePayload/clientMutationId
    :gql.git-lab-specs.MergeRequestSetMilestonePayload/errors
    :gql.git-lab-specs.MergeRequestSetMilestonePayload/mergeRequest
    :gql.git-lab-specs.MergeRequestSetMilestonePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs/PipelineEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.PipelineEdge/cursor
    :gql.git-lab-specs.PipelineEdge/node
    :gql.git-lab-specs.PipelineEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNotePayload/__typename #{"CreateNotePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.notes/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.action/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.discussions/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequests/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.lastCommit/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Note)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics.wikiSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/VisibilityLevelsEnum
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :VisibilityLevelsEnum/internal
    :gql.git-lab-specs.VisibilityLevelsEnum/internal
    :VisibilityLevelsEnum/private
    :gql.git-lab-specs.VisibilityLevelsEnum/private
    :VisibilityLevelsEnum/public
    :gql.git-lab-specs.VisibilityLevelsEnum/public)))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequest
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequest/allowCollaboration
    :gql.git-lab-specs.MergeRequest/assignees
    :gql.git-lab-specs.MergeRequest/createdAt
    :gql.git-lab-specs.MergeRequest/defaultMergeCommitMessage
    :gql.git-lab-specs.MergeRequest/description
    :gql.git-lab-specs.MergeRequest/descriptionHtml
    :gql.git-lab-specs.MergeRequest/diffHeadSha
    :gql.git-lab-specs.MergeRequest/diffRefs
    :gql.git-lab-specs.MergeRequest/discussionLocked
    :gql.git-lab-specs.MergeRequest/discussions
    :gql.git-lab-specs.MergeRequest/downvotes
    :gql.git-lab-specs.MergeRequest/forceRemoveSourceBranch
    :gql.git-lab-specs.MergeRequest/headPipeline
    :gql.git-lab-specs.MergeRequest/id
    :gql.git-lab-specs.MergeRequest/iid
    :gql.git-lab-specs.MergeRequest/inProgressMergeCommitSha
    :gql.git-lab-specs.MergeRequest/labels
    :gql.git-lab-specs.MergeRequest/mergeCommitMessage
    :gql.git-lab-specs.MergeRequest/mergeCommitSha
    :gql.git-lab-specs.MergeRequest/mergeError
    :gql.git-lab-specs.MergeRequest/mergeOngoing
    :gql.git-lab-specs.MergeRequest/mergeStatus
    :gql.git-lab-specs.MergeRequest/mergeWhenPipelineSucceeds
    :gql.git-lab-specs.MergeRequest/mergeableDiscussionsState
    :gql.git-lab-specs.MergeRequest/milestone
    :gql.git-lab-specs.MergeRequest/notes
    :gql.git-lab-specs.MergeRequest/participants
    :gql.git-lab-specs.MergeRequest/pipelines
    :gql.git-lab-specs.MergeRequest/project
    :gql.git-lab-specs.MergeRequest/projectId
    :gql.git-lab-specs.MergeRequest/rebaseCommitSha
    :gql.git-lab-specs.MergeRequest/rebaseInProgress
    :gql.git-lab-specs.MergeRequest/reference
    :gql.git-lab-specs.MergeRequest/shouldBeRebased
    :gql.git-lab-specs.MergeRequest/shouldRemoveSourceBranch
    :gql.git-lab-specs.MergeRequest/sourceBranch
    :gql.git-lab-specs.MergeRequest/sourceBranchExists
    :gql.git-lab-specs.MergeRequest/sourceProject
    :gql.git-lab-specs.MergeRequest/sourceProjectId
    :gql.git-lab-specs.MergeRequest/state
    :gql.git-lab-specs.MergeRequest/subscribed
    :gql.git-lab-specs.MergeRequest/targetBranch
    :gql.git-lab-specs.MergeRequest/targetProject
    :gql.git-lab-specs.MergeRequest/targetProjectId
    :gql.git-lab-specs.MergeRequest/taskCompletionStatus
    :gql.git-lab-specs.MergeRequest/timeEstimate
    :gql.git-lab-specs.MergeRequest/title
    :gql.git-lab-specs.MergeRequest/titleHtml
    :gql.git-lab-specs.MergeRequest/totalTimeSpent
    :gql.git-lab-specs.MergeRequest/updatedAt
    :gql.git-lab-specs.MergeRequest/upvotes
    :gql.git-lab-specs.MergeRequest/userNotesCount
    :gql.git-lab-specs.MergeRequest/userPermissions
    :gql.git-lab-specs.MergeRequest/webUrl
    :gql.git-lab-specs.MergeRequest/workInProgress
    :gql.git-lab-specs.MergeRequest/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/mergeRequests
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequestConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffRefs.headSha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.submodules/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.participants/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.requestAccessEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Metadata
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Metadata/revision
    :gql.git-lab-specs.Metadata/version
    :gql.git-lab-specs.Metadata/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestonePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/message
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/updatedBefore
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPathsInput/oldPath
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Submodule))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffRefs/__typename #{"DiffRefs"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedPayload/mergeRequest
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Note))

(clojure.spec.alpha/def :gql.git-lab-specs.EntryType/blob #{"blob"})

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.latestPipeline/ref
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics.wikiSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetSubscription/&args
  (clojure.spec.alpha/keys
   :opt-un
   []
   :req-un
   [:gql.git-lab-specs.Mutation.mergeRequestSetSubscription/input]))

(clojure.spec.alpha/def :gql.git-lab-specs/__TypeKind
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :__TypeKind/ENUM
    :gql.git-lab-specs.__TypeKind/ENUM
    :__TypeKind/INPUT_OBJECT
    :gql.git-lab-specs.__TypeKind/INPUT_OBJECT
    :__TypeKind/INTERFACE
    :gql.git-lab-specs.__TypeKind/INTERFACE
    :__TypeKind/LIST
    :gql.git-lab-specs.__TypeKind/LIST
    :__TypeKind/NON_NULL
    :gql.git-lab-specs.__TypeKind/NON_NULL
    :__TypeKind/OBJECT
    :gql.git-lab-specs.__TypeKind/OBJECT
    :__TypeKind/SCALAR
    :gql.git-lab-specs.__TypeKind/SCALAR
    :__TypeKind/UNION
    :gql.git-lab-specs.__TypeKind/UNION)))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuableState/locked #{"locked"})

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive/args
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/__InputValue :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.projects/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionEdge/__typename #{"DiscussionEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs/PipelinePermissions
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.PipelinePermissions/adminPipeline
    :gql.git-lab-specs.PipelinePermissions/destroyPipeline
    :gql.git-lab-specs.PipelinePermissions/updatePipeline
    :gql.git-lab-specs.PipelinePermissions/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/DiscussionEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.committedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/diffRefs
  (clojure.spec.alpha/nilable :gql.git-lab-specs/DiffRefs))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequest/iid
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.assignees/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/OBJECT #{"OBJECT"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.snippets/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.fullPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.todoRestore/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.todoRestore/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Submodule)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPositionInput/baseSha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.updatedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group/__typename #{"Group"})

(clojure.spec.alpha/def :gql.git-lab-specs.GroupPermissions/__typename #{"GroupPermissions"})

(clojure.spec.alpha/def :gql.git-lab-specs/SnippetConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.SnippetConnection/edges
    :gql.git-lab-specs.SnippetConnection/nodes
    :gql.git-lab-specs.SnippetConnection/pageInfo
    :gql.git-lab-specs.SnippetConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/ids
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/ID :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics.buildArtifactsSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.notes/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/possibleTypes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/__Type :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoConnection/__typename #{"TodoConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/UNION #{"UNION"})

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/beforeSha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.sentryProjectId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.notes/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuableState/opened #{"opened"})

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.updateNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.updateNote/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createMergeRequestFrom/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TaskCompletionStatus.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji.unicodeVersion/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.uploadFile/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.labels/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.enumValues/includeDeprecated
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/type
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/TodoTargetEnum :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/lastReleaseShortVersion
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNotePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.blobs/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Tree.blobs/after
    :gql.git-lab-specs.Tree.blobs/before
    :gql.git-lab-specs.Tree.blobs/first
    :gql.git-lab-specs.Tree.blobs/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/requestAccessEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorFrequency.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNotePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload.awardEmoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsPayload/__typename
  #{"MergeRequestSetLabelsPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs/PipelineConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.PipelineConnection/edges
    :gql.git-lab-specs.PipelineConnection/nodes
    :gql.git-lab-specs.PipelineConnection/pageInfo
    :gql.git-lab-specs.PipelineConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetMilestoneInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetMilestoneInput/clientMutationId
    :gql.git-lab-specs.MergeRequestSetMilestoneInput/milestoneId]
   :req-un
   [:gql.git-lab-specs.MergeRequestSetMilestoneInput/iid
    :gql.git-lab-specs.MergeRequestSetMilestoneInput/projectPath]))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/FAILED #{"FAILED"})

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.lastSeen/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics.buildArtifactsSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.duration/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDonePayload.updatedIds/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.latestPipeline/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Commit.latestPipeline/ref
    :gql.git-lab-specs.Commit.latestPipeline/sha
    :gql.git-lab-specs.Commit.latestPipeline/status]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.width/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository.exists/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetInput/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.discussions/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiPayload/__typename
  #{"AddAwardEmojiPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequests/iid
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/Namespace
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Namespace/description
    :gql.git-lab-specs.Namespace/descriptionHtml
    :gql.git-lab-specs.Namespace/fullName
    :gql.git-lab-specs.Namespace/fullPath
    :gql.git-lab-specs.Namespace/id
    :gql.git-lab-specs.Namespace/lfsEnabled
    :gql.git-lab-specs.Namespace/name
    :gql.git-lab-specs.Namespace/path
    :gql.git-lab-specs.Namespace/projects
    :gql.git-lab-specs.Namespace/requestAccessEnabled
    :gql.git-lab-specs.Namespace/rootStorageStatistics
    :gql.git-lab-specs.Namespace/visibility
    :gql.git-lab-specs.Namespace/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.UserConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/UserEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.snippets/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.newPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesPayload/mergeRequest
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.visibility/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetWipInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetWipInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.MergeRequestSetWipInput/iid
    :gql.git-lab-specs.MergeRequestSetWipInput/projectPath
    :gql.git-lab-specs.MergeRequestSetWipInput/wip]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/INPUT_OBJECT #{"INPUT_OBJECT"})

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.addAwardEmoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.addAwardEmoji/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository.tree/ref
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.projects/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNotePayload.note/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema/subscriptionType
  (clojure.spec.alpha/nilable :gql.git-lab-specs/__Type))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/__typename #{"Snippet"})

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetSubscriptionInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetSubscriptionInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.MergeRequestSetSubscriptionInput/iid
    :gql.git-lab-specs.MergeRequestSetSubscriptionInput/projectPath
    :gql.git-lab-specs.MergeRequestSetSubscriptionInput/subscribedState]))

(clojure.spec.alpha/def :gql.git-lab-specs.Note/project
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Project))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/wikiEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.trees/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Tree.trees/after
    :gql.git-lab-specs.Tree.trees/before
    :gql.git-lab-specs.Tree.trees/first
    :gql.git-lab-specs.Tree.trees/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.assignees/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialPayload/__typename
  #{"IssueSetConfidentialPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs/CreateImageDiffNoteInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.CreateImageDiffNoteInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.CreateImageDiffNoteInput/body
    :gql.git-lab-specs.CreateImageDiffNoteInput/noteableId
    :gql.git-lab-specs.CreateImageDiffNoteInput/position]))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createPages/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequests/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetLabels/&args
  (clojure.spec.alpha/keys
   :opt-un
   []
   :req-un
   [:gql.git-lab-specs.Mutation.mergeRequestSetLabels/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.httpUrlToRepo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoEdge/__typename #{"TodoEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.pipelines/sha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.TaskCompletionStatus.completedCount/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionPayload.mergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.notes/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive.locations/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNotePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions.awardEmoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/search
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.onlyAllowMergeIfPipelineSucceeds/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Metadata.revision/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/__typename #{"Pipeline"})

(clojure.spec.alpha/def :gql.git-lab-specs.Note/position
  (clojure.spec.alpha/nilable :gql.git-lab-specs/DiffPosition))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.todoMarkDone/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.todoMarkDone/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.flatPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.discussions/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Snippet.discussions/after
    :gql.git-lab-specs.Snippet.discussions/before
    :gql.git-lab-specs.Snippet.discussions/first
    :gql.git-lab-specs.Snippet.discussions/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/oldLine
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.count/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/snippets
  (clojure.spec.alpha/nilable :gql.git-lab-specs/SnippetConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/DestroySnippetInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DestroySnippetInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.DestroySnippetInput/id]))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/requestAccessEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.author/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDatePayload.issue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.title/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoTargetEnum/MERGEREQUEST #{"MERGEREQUEST"})

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo.endCursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialPayload/issue
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Issue))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.archiveProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.mergeOngoing/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/closedAt
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.readProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/userNotesCount
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.GroupPermissions.readGroup/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics/__typename
  #{"RootStorageStatistics"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.pipelines/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics.packagesSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/SUBSCRIPTION #{"SUBSCRIPTION"})

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.pipelines/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNotePayload/__typename #{"DestroyNotePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions.readSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetPayload.snippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/RemoveAwardEmojiInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.RemoveAwardEmojiInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.RemoveAwardEmojiInput/awardableId
    :gql.git-lab-specs.RemoveAwardEmojiInput/name]))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDonePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNotePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/__typename #{"DetailedStatus"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.snippets/visibility
  (clojure.spec.alpha/nilable :gql.git-lab-specs/VisibilityScopesEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/mergeRequestSetAssignees
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequestSetAssigneesPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions.readIssue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNotePayload.note/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/AwardEmoji
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.AwardEmoji/description
    :gql.git-lab-specs.AwardEmoji/emoji
    :gql.git-lab-specs.AwardEmoji/name
    :gql.git-lab-specs.AwardEmoji/unicode
    :gql.git-lab-specs.AwardEmoji/unicodeVersion
    :gql.git-lab-specs.AwardEmoji/user
    :gql.git-lab-specs.AwardEmoji/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics.packagesSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue.deprecationReason/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.VisibilityLevelsEnum/private #{"private"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics/__typename #{"ProjectStatistics"})

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.sha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.workInProgress/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.pipelines/ref
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/mergeRequestSetLocked
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequestSetLockedPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Int clojure.core/integer?)

(clojure.spec.alpha/def :gql.git-lab-specs.__Field.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.group/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Query.group/fullPath]))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.readCycleAnalytics/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetWipPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetWipPayload/clientMutationId
    :gql.git-lab-specs.MergeRequestSetWipPayload/errors
    :gql.git-lab-specs.MergeRequestSetWipPayload/mergeRequest
    :gql.git-lab-specs.MergeRequestSetWipPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry.path/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNotePayload/__typename
  #{"CreateDiffNotePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/__typename #{"Namespace"})

(clojure.spec.alpha/def :gql.git-lab-specs/Query
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Query/currentUser
    :gql.git-lab-specs.Query/echo
    :gql.git-lab-specs.Query/group
    :gql.git-lab-specs.Query/metadata
    :gql.git-lab-specs.Query/namespace
    :gql.git-lab-specs.Query/project
    :gql.git-lab-specs.Query/snippets
    :gql.git-lab-specs.Query/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs/DiffPositionInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DiffPositionInput/baseSha :gql.git-lab-specs.DiffPositionInput/oldLine]
   :req-un
   [:gql.git-lab-specs.DiffPositionInput/headSha
    :gql.git-lab-specs.DiffPositionInput/newLine
    :gql.git-lab-specs.DiffPositionInput/paths
    :gql.git-lab-specs.DiffPositionInput/startSha]))

(clojure.spec.alpha/def :gql.git-lab-specs.User.username/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema/__typename #{"__Schema"})

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.replyId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipPayload/__typename
  #{"MergeRequestSetWipPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs/IssueEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.IssueEdge/cursor
    :gql.git-lab-specs.IssueEdge/node
    :gql.git-lab-specs.IssueEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDonePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Label.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/__InputValue
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.__InputValue/defaultValue
    :gql.git-lab-specs.__InputValue/description
    :gql.git-lab-specs.__InputValue/name
    :gql.git-lab-specs.__InputValue/type
    :gql.git-lab-specs.__InputValue/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree/lastCommit
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Commit))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.upvotes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/DetailedStatus
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DetailedStatus/detailsPath
    :gql.git-lab-specs.DetailedStatus/favicon
    :gql.git-lab-specs.DetailedStatus/group
    :gql.git-lab-specs.DetailedStatus/hasDetails
    :gql.git-lab-specs.DetailedStatus/icon
    :gql.git-lab-specs.DetailedStatus/label
    :gql.git-lab-specs.DetailedStatus/text
    :gql.git-lab-specs.DetailedStatus/tooltip
    :gql.git-lab-specs.DetailedStatus/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.text/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/frequency
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/SentryErrorFrequency :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetConnection/__typename #{"SnippetConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSort/updated_desc #{"updated_desc"})

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestPermissions
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestPermissions/adminMergeRequest
    :gql.git-lab-specs.MergeRequestPermissions/cherryPickOnCurrentMergeRequest
    :gql.git-lab-specs.MergeRequestPermissions/createNote
    :gql.git-lab-specs.MergeRequestPermissions/pushToSourceBranch
    :gql.git-lab-specs.MergeRequestPermissions/readMergeRequest
    :gql.git-lab-specs.MergeRequestPermissions/removeSourceBranch
    :gql.git-lab-specs.MergeRequestPermissions/revertOnCurrentMergeRequest
    :gql.git-lab-specs.MergeRequestPermissions/updateMergeRequest
    :gql.git-lab-specs.MergeRequestPermissions/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.EntryType/commit #{"commit"})

(clojure.spec.alpha/def :gql.git-lab-specs/TreeEntryEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TreeEntryEdge/cursor
    :gql.git-lab-specs.TreeEntryEdge/node
    :gql.git-lab-specs.TreeEntryEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User.snippets/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.User.snippets/after
    :gql.git-lab-specs.User.snippets/before
    :gql.git-lab-specs.User.snippets/first
    :gql.git-lab-specs.User.snippets/ids
    :gql.git-lab-specs.User.snippets/last
    :gql.git-lab-specs.User.snippets/type
    :gql.git-lab-specs.User.snippets/visibility]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestoneInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/IssueSetConfidentialInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.IssueSetConfidentialInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.IssueSetConfidentialInput/confidential
    :gql.git-lab-specs.IssueSetConfidentialInput/iid
    :gql.git-lab-specs.IssueSetConfidentialInput/projectPath]))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/startDate
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.changeVisibilityLevel/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.headPipeline/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDonePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.repository/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.notes/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Noteable.notes/after
    :gql.git-lab-specs.Noteable.notes/before
    :gql.git-lab-specs.Noteable.notes/first
    :gql.git-lab-specs.Noteable.notes/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.updatedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNotePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UserEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Label.textColor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/mergeRequestsEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestConnection/edges
    :gql.git-lab-specs.MergeRequestConnection/nodes
    :gql.git-lab-specs.MergeRequestConnection/pageInfo
    :gql.git-lab-specs.MergeRequestConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.wikiEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.state/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.pipelines/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Project.pipelines/after
    :gql.git-lab-specs.Project.pipelines/before
    :gql.git-lab-specs.Project.pipelines/first
    :gql.git-lab-specs.Project.pipelines/last
    :gql.git-lab-specs.Project.pipelines/ref
    :gql.git-lab-specs.Project.pipelines/sha
    :gql.git-lab-specs.Project.pipelines/status]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/removeAwardEmoji
  (clojure.spec.alpha/nilable :gql.git-lab-specs/RemoveAwardEmojiPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/group
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Group))

(clojure.spec.alpha/def :gql.git-lab-specs/TodoStateEnum
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :TodoStateEnum/done
    :gql.git-lab-specs.TodoStateEnum/done
    :TodoStateEnum/pending
    :gql.git-lab-specs.TodoStateEnum/pending)))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.updatedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/webUrl
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field/__typename #{"__Field"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.sourceProjectId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/updatedBefore
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__TypeKind/UNION #{"UNION"})

(clojure.spec.alpha/def :gql.git-lab-specs/VisibilityScopesEnum
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :VisibilityScopesEnum/internal
    :gql.git-lab-specs.VisibilityScopesEnum/internal
    :VisibilityScopesEnum/private
    :gql.git-lab-specs.VisibilityScopesEnum/private
    :VisibilityScopesEnum/public
    :gql.git-lab-specs.VisibilityScopesEnum/public)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.userPermissions/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Blob
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Blob/flatPath
    :gql.git-lab-specs.Blob/id
    :gql.git-lab-specs.Blob/lfsOid
    :gql.git-lab-specs.Blob/name
    :gql.git-lab-specs.Blob/path
    :gql.git-lab-specs.Blob/sha
    :gql.git-lab-specs.Blob/type
    :gql.git-lab-specs.Blob/webUrl
    :gql.git-lab-specs.Blob/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.updateWiki/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineConnection/__typename #{"PipelineConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/dueDate
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.project/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.diffRefs/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/interfaces
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/__Type :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/sentryDetailedError
  (clojure.spec.alpha/nilable :gql.git-lab-specs/SentryDetailedError))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetEdge/__typename #{"SnippetEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs/DiffPosition
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DiffPosition/diffRefs
    :gql.git-lab-specs.DiffPosition/filePath
    :gql.git-lab-specs.DiffPosition/height
    :gql.git-lab-specs.DiffPosition/newLine
    :gql.git-lab-specs.DiffPosition/newPath
    :gql.git-lab-specs.DiffPosition/oldLine
    :gql.git-lab-specs.DiffPosition/oldPath
    :gql.git-lab-specs.DiffPosition/positionType
    :gql.git-lab-specs.DiffPosition/width
    :gql.git-lab-specs.DiffPosition/x
    :gql.git-lab-specs.DiffPosition/y
    :gql.git-lab-specs.DiffPosition/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/CANCELED #{"CANCELED"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.removeSourceBranch/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive.onField/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoActionEnum/mentioned #{"mentioned"})

(clojure.spec.alpha/def :gql.git-lab-specs.Label/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions.reportSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetInput/fileName
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.defaultMergeCommitMessage/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNotePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNotePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/__DirectiveLocation
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :__DirectiveLocation/ARGUMENT_DEFINITION
    :gql.git-lab-specs.__DirectiveLocation/ARGUMENT_DEFINITION
    :__DirectiveLocation/ENUM
    :gql.git-lab-specs.__DirectiveLocation/ENUM
    :__DirectiveLocation/ENUM_VALUE
    :gql.git-lab-specs.__DirectiveLocation/ENUM_VALUE
    :__DirectiveLocation/FIELD
    :gql.git-lab-specs.__DirectiveLocation/FIELD
    :__DirectiveLocation/FIELD_DEFINITION
    :gql.git-lab-specs.__DirectiveLocation/FIELD_DEFINITION
    :__DirectiveLocation/FRAGMENT_DEFINITION
    :gql.git-lab-specs.__DirectiveLocation/FRAGMENT_DEFINITION
    :__DirectiveLocation/FRAGMENT_SPREAD
    :gql.git-lab-specs.__DirectiveLocation/FRAGMENT_SPREAD
    :__DirectiveLocation/INLINE_FRAGMENT
    :gql.git-lab-specs.__DirectiveLocation/INLINE_FRAGMENT
    :__DirectiveLocation/INPUT_FIELD_DEFINITION
    :gql.git-lab-specs.__DirectiveLocation/INPUT_FIELD_DEFINITION
    :__DirectiveLocation/INPUT_OBJECT
    :gql.git-lab-specs.__DirectiveLocation/INPUT_OBJECT
    :__DirectiveLocation/INTERFACE
    :gql.git-lab-specs.__DirectiveLocation/INTERFACE
    :__DirectiveLocation/MUTATION
    :gql.git-lab-specs.__DirectiveLocation/MUTATION
    :__DirectiveLocation/OBJECT
    :gql.git-lab-specs.__DirectiveLocation/OBJECT
    :__DirectiveLocation/QUERY
    :gql.git-lab-specs.__DirectiveLocation/QUERY
    :__DirectiveLocation/SCALAR
    :gql.git-lab-specs.__DirectiveLocation/SCALAR
    :__DirectiveLocation/SCHEMA
    :gql.git-lab-specs.__DirectiveLocation/SCHEMA
    :__DirectiveLocation/SUBSCRIPTION
    :gql.git-lab-specs.__DirectiveLocation/SUBSCRIPTION
    :__DirectiveLocation/UNION
    :gql.git-lab-specs.__DirectiveLocation/UNION)))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/__typename #{"Issue"})

(clojure.spec.alpha/def :gql.git-lab-specs/TodoMarkDoneInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TodoMarkDoneInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.TodoMarkDoneInput/id]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetLockedPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetLockedPayload/clientMutationId
    :gql.git-lab-specs.MergeRequestSetLockedPayload/errors
    :gql.git-lab-specs.MergeRequestSetLockedPayload/mergeRequest
    :gql.git-lab-specs.MergeRequestSetLockedPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs/Noteable
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :Issue
    :gql.git-lab-specs/Issue
    :MergeRequest
    :gql.git-lab-specs/MergeRequest
    :Snippet
    :gql.git-lab-specs/Snippet)))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.title/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__TypeKind/INPUT_OBJECT #{"INPUT_OBJECT"})

(clojure.spec.alpha/def :gql.git-lab-specs/ProjectEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.ProjectEdge/cursor
    :gql.git-lab-specs.ProjectEdge/node
    :gql.git-lab-specs.ProjectEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.title/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload/awardEmoji
  (clojure.spec.alpha/nilable :gql.git-lab-specs/AwardEmoji))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/namespace
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Namespace))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.requestAccessEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsInput/labelIds
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/ID :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UserPermissions/__typename #{"UserPermissions"})

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineEdge/__typename #{"PipelineEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.updateMergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/mergeRequest
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequests/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDonePayload/__typename #{"TodoMarkDonePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs/SubmoduleEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.SubmoduleEdge/cursor
    :gql.git-lab-specs.SubmoduleEdge/node
    :gql.git-lab-specs.SubmoduleEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createMergeRequestIn/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/__typename #{"SentryDetailedError"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.mergeableDiscussionsState/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/jobsEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/iid
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.milestone/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/startedAt
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs/Float clojure.core/float?)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/createImageDiffNote
  (clojure.spec.alpha/nilable :gql.git-lab-specs/CreateImageDiffNotePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.assignees/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/repository
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Repository))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.projects/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/containerRegistryEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/destroySnippet
  (clojure.spec.alpha/nilable :gql.git-lab-specs/DestroySnippetPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.beforeSha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/__typename #{"Project"})

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji.emoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Entry.path/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.visibility/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.descriptionHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.discussions/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree/__typename #{"Tree"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.adminWiki/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/iids
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs/TodoEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TodoEdge/cursor
    :gql.git-lab-specs.TodoEdge/node
    :gql.git-lab-specs.TodoEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.UserConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/User)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestonePayload.mergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive.args/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/MUTATION #{"MUTATION"})

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetPayload.snippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MutationOperationMode/REMOVE #{"REMOVE"})

(clojure.spec.alpha/def :gql.git-lab-specs.__TypeKind/LIST #{"LIST"})

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.reference/&args
  (clojure.spec.alpha/keys :opt-un [:gql.git-lab-specs.Issue.reference/full] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.author/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.notes/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/fileName
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.cherryPickOnCurrentMergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/AddAwardEmojiInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.AddAwardEmojiInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.AddAwardEmojiInput/awardableId :gql.git-lab-specs.AddAwardEmojiInput/name]))

(clojure.spec.alpha/def :gql.git-lab-specs/UpdateNoteInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.UpdateNoteInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.UpdateNoteInput/body :gql.git-lab-specs.UpdateNoteInput/id]))

(clojure.spec.alpha/def :gql.git-lab-specs.User/snippets
  (clojure.spec.alpha/nilable :gql.git-lab-specs/SnippetConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.openIssuesCount/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.firstSeen/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.issueSetConfidential/&args
  (clojure.spec.alpha/keys
   :opt-un
   []
   :req-un
   [:gql.git-lab-specs.Mutation.issueSetConfidential/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.discussions/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.createSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.createSnippet/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.labels/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Group/descriptionHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.jobsEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository/tree
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Tree))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.labels/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequest.labels/after
    :gql.git-lab-specs.MergeRequest.labels/before
    :gql.git-lab-specs.MergeRequest.labels/first
    :gql.git-lab-specs.MergeRequest.labels/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs/IssueSetDueDatePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.IssueSetDueDatePayload/clientMutationId
    :gql.git-lab-specs.IssueSetDueDatePayload/errors
    :gql.git-lab-specs.IssueSetDueDatePayload/issue
    :gql.git-lab-specs.IssueSetDueDatePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.UserEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/User))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.labels/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNotePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.discussions/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Issue.discussions/after
    :gql.git-lab-specs.Issue.discussions/before
    :gql.git-lab-specs.Issue.discussions/first
    :gql.git-lab-specs.Issue.discussions/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.notes/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesInput/assigneeUsernames
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Query.snippets/after
    :gql.git-lab-specs.Query.snippets/authorId
    :gql.git-lab-specs.Query.snippets/before
    :gql.git-lab-specs.Query.snippets/explore
    :gql.git-lab-specs.Query.snippets/first
    :gql.git-lab-specs.Query.snippets/ids
    :gql.git-lab-specs.Query.snippets/last
    :gql.git-lab-specs.Query.snippets/projectId
    :gql.git-lab-specs.Query.snippets/type
    :gql.git-lab-specs.Query.snippets/visibility]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.path/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/SnippetPermissions
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.SnippetPermissions/adminSnippet
    :gql.git-lab-specs.SnippetPermissions/awardEmoji
    :gql.git-lab-specs.SnippetPermissions/createNote
    :gql.git-lab-specs.SnippetPermissions/readSnippet
    :gql.git-lab-specs.SnippetPermissions/reportSnippet
    :gql.git-lab-specs.SnippetPermissions/updateSnippet
    :gql.git-lab-specs.SnippetPermissions/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/mergeRequestSetWip
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequestSetWipPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.snippetsEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/shouldRemoveSourceBranch
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.notes/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/__typename #{"Blob"})

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue.isDeprecated/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.notes/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Discussion.notes/after
    :gql.git-lab-specs.Discussion.notes/before
    :gql.git-lab-specs.Discussion.notes/first
    :gql.git-lab-specs.Discussion.notes/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.nameWithNamespace/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.assignees/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Note/resolvedBy
  (clojure.spec.alpha/nilable :gql.git-lab-specs/User))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.oldLine/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDonePayload.todo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions.adminSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.participants/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/ARGUMENT_DEFINITION
  #{"ARGUMENT_DEFINITION"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.lfsEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.participants/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/__EnumValue
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.__EnumValue/deprecationReason
    :gql.git-lab-specs.__EnumValue/description
    :gql.git-lab-specs.__EnumValue/isDeprecated
    :gql.git-lab-specs.__EnumValue/name
    :gql.git-lab-specs.__EnumValue/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo/__typename #{"PageInfo"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project/importStatus
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Query/metadata
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Metadata))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.assignees/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/SnippetEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.SnippetEdge/cursor
    :gql.git-lab-specs.SnippetEdge/node
    :gql.git-lab-specs.SnippetEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/groupId
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/ID :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.sha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/TodoActionEnum
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :TodoActionEnum/approval_required
    :gql.git-lab-specs.TodoActionEnum/approval_required
    :TodoActionEnum/assigned
    :gql.git-lab-specs.TodoActionEnum/assigned
    :TodoActionEnum/build_failed
    :gql.git-lab-specs.TodoActionEnum/build_failed
    :TodoActionEnum/directly_addressed
    :gql.git-lab-specs.TodoActionEnum/directly_addressed
    :TodoActionEnum/marked
    :gql.git-lab-specs.TodoActionEnum/marked
    :TodoActionEnum/mentioned
    :gql.git-lab-specs.TodoActionEnum/mentioned
    :TodoActionEnum/unmergeable
    :gql.git-lab-specs.TodoActionEnum/unmergeable)))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Time clojure.core/any?)

(clojure.spec.alpha/def :gql.git-lab-specs/NoteEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.NoteEdge/cursor
    :gql.git-lab-specs.NoteEdge/node
    :gql.git-lab-specs.NoteEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions.createNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.onlyAllowMergeIfAllDiscussionsAreResolved/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDonePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectConnection/__typename #{"ProjectConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs/Snippet
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Snippet/author
    :gql.git-lab-specs.Snippet/content
    :gql.git-lab-specs.Snippet/createdAt
    :gql.git-lab-specs.Snippet/description
    :gql.git-lab-specs.Snippet/descriptionHtml
    :gql.git-lab-specs.Snippet/discussions
    :gql.git-lab-specs.Snippet/fileName
    :gql.git-lab-specs.Snippet/id
    :gql.git-lab-specs.Snippet/notes
    :gql.git-lab-specs.Snippet/project
    :gql.git-lab-specs.Snippet/rawUrl
    :gql.git-lab-specs.Snippet/title
    :gql.git-lab-specs.Snippet/updatedAt
    :gql.git-lab-specs.Snippet/userPermissions
    :gql.git-lab-specs.Snippet/visibilityLevel
    :gql.git-lab-specs.Snippet/webUrl
    :gql.git-lab-specs.Snippet/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.namespace/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Query.namespace/fullPath]))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueConnection/__typename #{"IssueConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.detailsPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequest/iids
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue/deprecationReason
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MutationOperationMode/APPEND #{"APPEND"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/DiffRefs
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DiffRefs/baseSha
    :gql.git-lab-specs.DiffRefs/headSha
    :gql.git-lab-specs.DiffRefs/startSha
    :gql.git-lab-specs.DiffRefs/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNotePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository.tree/recursive
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.discussions/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.pipelines/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/y
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/duration
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.pipelines/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestEdge/cursor
    :gql.git-lab-specs.MergeRequestEdge/node
    :gql.git-lab-specs.MergeRequestEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Entry
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :Blob
    :gql.git-lab-specs/Blob
    :Submodule
    :gql.git-lab-specs/Submodule
    :TreeEntry
    :gql.git-lab-specs/TreeEntry)))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.lastReleaseShortVersion/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.discussions/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/authoredDate
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs/TodoRestoreInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TodoRestoreInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.TodoRestoreInput/id]))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createPipelineSchedule/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/pipelines
  (clojure.spec.alpha/nilable :gql.git-lab-specs/PipelineConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.createDiffNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.createDiffNote/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.labels/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.downloadCode/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/IssueState
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :IssueState/closed
    :gql.git-lab-specs.IssueState/closed
    :IssueState/locked
    :gql.git-lab-specs.IssueState/locked
    :IssueState/opened
    :gql.git-lab-specs.IssueState/opened)))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetWip/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.mergeRequestSetWip/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetInput/content
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/participants
  (clojure.spec.alpha/nilable :gql.git-lab-specs/UserConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDatePayload/issue
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Issue))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectEdge/__typename #{"ProjectEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.notes/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.descriptionHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.reference/full
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Note/bodyHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.labels/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueEdge/__typename #{"IssueEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.projectId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/authorName
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.lfsEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/statistics
  (clojure.spec.alpha/nilable :gql.git-lab-specs/ProjectStatistics))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/coverage
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Float))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.userPermissions/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestorePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.VisibilityLevelsEnum/public #{"public"})

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorStatus/UNRESOLVED #{"UNRESOLVED"})

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.enumValues/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.__Type.enumValues/includeDeprecated]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/milestone
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Milestone))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/SubmoduleEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.assignees/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/GroupPermissions
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.GroupPermissions/readGroup :gql.git-lab-specs.GroupPermissions/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.requestAccessEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNotePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.submodules/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Tree.submodules/after
    :gql.git-lab-specs.Tree.submodules/before
    :gql.git-lab-specs.Tree.submodules/first
    :gql.git-lab-specs.Tree.submodules/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.pipelines/sha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNoteInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.pipelines/sha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDatePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.project/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.participants/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequest.participants/after
    :gql.git-lab-specs.MergeRequest.participants/before
    :gql.git-lab-specs.MergeRequest.participants/first
    :gql.git-lab-specs.MergeRequest.participants/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics.repositorySize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/ProjectStatistics
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.ProjectStatistics/buildArtifactsSize
    :gql.git-lab-specs.ProjectStatistics/commitCount
    :gql.git-lab-specs.ProjectStatistics/lfsObjectsSize
    :gql.git-lab-specs.ProjectStatistics/packagesSize
    :gql.git-lab-specs.ProjectStatistics/repositorySize
    :gql.git-lab-specs.ProjectStatistics/storageSize
    :gql.git-lab-specs.ProjectStatistics/wikiSize
    :gql.git-lab-specs.ProjectStatistics/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobConnection/__typename #{"BlobConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.removePages/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.confidential/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/BlobEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.BlobEdge/cursor
    :gql.git-lab-specs.BlobEdge/node
    :gql.git-lab-specs.BlobEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue.defaultValue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/mergeRequestSetMilestone
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequestSetMilestonePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNotePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetInput/visibilityLevel
  (clojure.spec.alpha/nilable :gql.git-lab-specs/VisibilityLevelsEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/NoteEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics.repositorySize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesPayload/__typename
  #{"MergeRequestSetAssigneesPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.participants/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry.sha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/__typename #{"__Type"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNotePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/UserEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.UserEdge/cursor
    :gql.git-lab-specs.UserEdge/node
    :gql.git-lab-specs.UserEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.adminOperations/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.downvotes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.renameProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__TypeKind/INTERFACE #{"INTERFACE"})

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji.unicode/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.message/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.sharedRunnersEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.culprit/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.descriptionHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.removeAwardEmoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.removeAwardEmoji/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/ProjectConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.ProjectConnection/edges
    :gql.git-lab-specs.ProjectConnection/nodes
    :gql.git-lab-specs.ProjectConnection/pageInfo
    :gql.git-lab-specs.ProjectConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.path/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload.toggledOn/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.updatePages/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDonePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.descriptionHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/lastActivityAt
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/mergeableDiscussionsState
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Label/__typename #{"Label"})

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.fileName/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/sharedRunnersEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.statistics/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/ID clojure.core/string?)

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.startDate/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobEdge/__typename #{"BlobEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/addAwardEmoji
  (clojure.spec.alpha/nilable :gql.git-lab-specs/AddAwardEmojiPayload))

(clojure.spec.alpha/def :gql.git-lab-specs/String clojure.core/string?)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNoteInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.rawUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry/__typename #{"TreeEntry"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issuesEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry.flatPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.notes/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/Repository
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Repository/empty
    :gql.git-lab-specs.Repository/exists
    :gql.git-lab-specs.Repository/rootRef
    :gql.git-lab-specs.Repository/tree
    :gql.git-lab-specs.Repository/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetPayload/__typename
  #{"UpdateSnippetPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.iid/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Tree
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Tree/blobs
    :gql.git-lab-specs.Tree/lastCommit
    :gql.git-lab-specs.Tree/submodules
    :gql.git-lab-specs.Tree/trees
    :gql.git-lab-specs.Tree/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNotePayload/note
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Note))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.notes/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.containerRegistryEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema/types
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/__Type :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.x/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/CreateSnippetPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.CreateSnippetPayload/clientMutationId
    :gql.git-lab-specs.CreateSnippetPayload/errors
    :gql.git-lab-specs.CreateSnippetPayload/snippet
    :gql.git-lab-specs.CreateSnippetPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/authorId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/ID))

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNotePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Todo))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.lfsEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__TypeKind/SCALAR #{"SCALAR"})

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema.directives/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedPayload/__typename
  #{"MergeRequestSetLockedPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.archived/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/ofType
  (clojure.spec.alpha/nilable :gql.git-lab-specs/__Type))

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.updatedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.VisibilityLevelsEnum/internal #{"internal"})

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNotePayload/__typename #{"UpdateNotePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.upvotes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.subscribed/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetPayload/__typename
  #{"MarkAsSpamSnippetPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs/TodoConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TodoConnection/edges
    :gql.git-lab-specs.TodoConnection/nodes
    :gql.git-lab-specs.TodoConnection/pageInfo
    :gql.git-lab-specs.TodoConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.finishedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelinePermissions.updatePipeline/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Entry.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.tooltip/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.group/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions.createNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Issue
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Issue/assignees
    :gql.git-lab-specs.Issue/author
    :gql.git-lab-specs.Issue/closedAt
    :gql.git-lab-specs.Issue/confidential
    :gql.git-lab-specs.Issue/createdAt
    :gql.git-lab-specs.Issue/description
    :gql.git-lab-specs.Issue/descriptionHtml
    :gql.git-lab-specs.Issue/discussionLocked
    :gql.git-lab-specs.Issue/discussions
    :gql.git-lab-specs.Issue/downvotes
    :gql.git-lab-specs.Issue/dueDate
    :gql.git-lab-specs.Issue/iid
    :gql.git-lab-specs.Issue/labels
    :gql.git-lab-specs.Issue/milestone
    :gql.git-lab-specs.Issue/notes
    :gql.git-lab-specs.Issue/participants
    :gql.git-lab-specs.Issue/reference
    :gql.git-lab-specs.Issue/relativePosition
    :gql.git-lab-specs.Issue/state
    :gql.git-lab-specs.Issue/subscribed
    :gql.git-lab-specs.Issue/taskCompletionStatus
    :gql.git-lab-specs.Issue/timeEstimate
    :gql.git-lab-specs.Issue/title
    :gql.git-lab-specs.Issue/titleHtml
    :gql.git-lab-specs.Issue/totalTimeSpent
    :gql.git-lab-specs.Issue/updatedAt
    :gql.git-lab-specs.Issue/upvotes
    :gql.git-lab-specs.Issue/userNotesCount
    :gql.git-lab-specs.Issue/userPermissions
    :gql.git-lab-specs.Issue/webPath
    :gql.git-lab-specs.Issue/webUrl
    :gql.git-lab-specs.Issue/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetAssigneesInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetAssigneesInput/clientMutationId
    :gql.git-lab-specs.MergeRequestSetAssigneesInput/operationMode]
   :req-un
   [:gql.git-lab-specs.MergeRequestSetAssigneesInput/assigneeUsernames
    :gql.git-lab-specs.MergeRequestSetAssigneesInput/iid
    :gql.git-lab-specs.MergeRequestSetAssigneesInput/projectPath]))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/FRAGMENT_SPREAD #{"FRAGMENT_SPREAD"})

(clojure.spec.alpha/def :gql.git-lab-specs.Group.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.pipelines/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequest.pipelines/after
    :gql.git-lab-specs.MergeRequest.pipelines/before
    :gql.git-lab-specs.MergeRequest.pipelines/first
    :gql.git-lab-specs.MergeRequest.pipelines/last
    :gql.git-lab-specs.MergeRequest.pipelines/ref
    :gql.git-lab-specs.MergeRequest.pipelines/sha
    :gql.git-lab-specs.MergeRequest.pipelines/status]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.hasDetails/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.sourceBranch/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Note/resolvedAt
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelConnection/__typename #{"LabelConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs/PageInfo
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.PageInfo/endCursor
    :gql.git-lab-specs.PageInfo/hasNextPage
    :gql.git-lab-specs.PageInfo/hasPreviousPage
    :gql.git-lab-specs.PageInfo/startCursor
    :gql.git-lab-specs.PageInfo/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/defaultMergeCommitMessage
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDonePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.descriptionHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions/__typename #{"NotePermissions"})

(clojure.spec.alpha/def :gql.git-lab-specs.UserPermissions.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/publicJobs
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/committedAt
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/action
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/TodoActionEnum :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs/DiffImagePositionInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DiffImagePositionInput/baseSha]
   :req-un
   [:gql.git-lab-specs.DiffImagePositionInput/headSha
    :gql.git-lab-specs.DiffImagePositionInput/height
    :gql.git-lab-specs.DiffImagePositionInput/paths
    :gql.git-lab-specs.DiffImagePositionInput/startSha
    :gql.git-lab-specs.DiffImagePositionInput/width
    :gql.git-lab-specs.DiffImagePositionInput/x
    :gql.git-lab-specs.DiffImagePositionInput/y]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryConnection/__typename #{"TreeEntryConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs/Label
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Label/color
    :gql.git-lab-specs.Label/description
    :gql.git-lab-specs.Label/descriptionHtml
    :gql.git-lab-specs.Label/id
    :gql.git-lab-specs.Label/textColor
    :gql.git-lab-specs.Label/title
    :gql.git-lab-specs.Label/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.notes/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNotePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/projectId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/ID))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.mergeCommitSha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuableState/closed #{"closed"})

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSort/created_asc #{"created_asc"})

(clojure.spec.alpha/def :gql.git-lab-specs.Query/group
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Group))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.path/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestorePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs/RemoveAwardEmojiPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.RemoveAwardEmojiPayload/awardEmoji
    :gql.git-lab-specs.RemoveAwardEmojiPayload/clientMutationId
    :gql.git-lab-specs.RemoveAwardEmojiPayload/errors
    :gql.git-lab-specs.RemoveAwardEmojiPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.state/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequestsEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.readProjectMember/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/SCHEMA #{"SCHEMA"})

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNotePayload/__typename
  #{"CreateImageDiffNotePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.coverage/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.totalTimeSpent/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.rebaseCommitSha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Entry.flatPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequestEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createIssue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.pipelines/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Commit.pipelines/after
    :gql.git-lab-specs.Commit.pipelines/before
    :gql.git-lab-specs.Commit.pipelines/first
    :gql.git-lab-specs.Commit.pipelines/last
    :gql.git-lab-specs.Commit.pipelines/ref
    :gql.git-lab-specs.Commit.pipelines/sha
    :gql.git-lab-specs.Commit.pipelines/status]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueState/locked #{"locked"})

(clojure.spec.alpha/def :gql.git-lab-specs/TodoMarkDonePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TodoMarkDonePayload/clientMutationId
    :gql.git-lab-specs.TodoMarkDonePayload/errors
    :gql.git-lab-specs.TodoMarkDonePayload/todo
    :gql.git-lab-specs.TodoMarkDonePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.notes/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelEdge/__typename #{"LabelEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.Group.parent/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/AddAwardEmojiPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.AddAwardEmojiPayload/awardEmoji
    :gql.git-lab-specs.AddAwardEmojiPayload/clientMutationId
    :gql.git-lab-specs.AddAwardEmojiPayload/errors
    :gql.git-lab-specs.AddAwardEmojiPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNotePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.targetType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.milestone/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiPayload.awardEmoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.project/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Query.project/fullPath]))

(clojure.spec.alpha/def :gql.git-lab-specs/Discussion
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Discussion/createdAt
    :gql.git-lab-specs.Discussion/id
    :gql.git-lab-specs.Discussion/notes
    :gql.git-lab-specs.Discussion/replyId
    :gql.git-lab-specs.Discussion/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryEdge/__typename #{"TreeEntryEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs/SentryDetailedError
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.SentryDetailedError/count
    :gql.git-lab-specs.SentryDetailedError/culprit
    :gql.git-lab-specs.SentryDetailedError/externalUrl
    :gql.git-lab-specs.SentryDetailedError/firstReleaseLastCommit
    :gql.git-lab-specs.SentryDetailedError/firstReleaseShortVersion
    :gql.git-lab-specs.SentryDetailedError/firstSeen
    :gql.git-lab-specs.SentryDetailedError/frequency
    :gql.git-lab-specs.SentryDetailedError/id
    :gql.git-lab-specs.SentryDetailedError/lastReleaseLastCommit
    :gql.git-lab-specs.SentryDetailedError/lastReleaseShortVersion
    :gql.git-lab-specs.SentryDetailedError/lastSeen
    :gql.git-lab-specs.SentryDetailedError/message
    :gql.git-lab-specs.SentryDetailedError/sentryId
    :gql.git-lab-specs.SentryDetailedError/sentryProjectId
    :gql.git-lab-specs.SentryDetailedError/sentryProjectName
    :gql.git-lab-specs.SentryDetailedError/sentryProjectSlug
    :gql.git-lab-specs.SentryDetailedError/shortId
    :gql.git-lab-specs.SentryDetailedError/status
    :gql.git-lab-specs.SentryDetailedError/title
    :gql.git-lab-specs.SentryDetailedError/type
    :gql.git-lab-specs.SentryDetailedError/userCount
    :gql.git-lab-specs.SentryDetailedError/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffRefs.startSha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDateInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository/rootRef
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.author/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSort/created_desc #{"created_desc"})

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestorePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/NotePermissions
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.NotePermissions/adminNote
    :gql.git-lab-specs.NotePermissions/awardEmoji
    :gql.git-lab-specs.NotePermissions/createNote
    :gql.git-lab-specs.NotePermissions/readNote
    :gql.git-lab-specs.NotePermissions/resolveNote
    :gql.git-lab-specs.NotePermissions/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.createNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.createNote/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.participants/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/SentryErrorFrequency
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.SentryErrorFrequency/count
    :gql.git-lab-specs.SentryErrorFrequency/time
    :gql.git-lab-specs.SentryErrorFrequency/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/__typename #{"Commit"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Query/project
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Project))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/__typename #{"MergeRequest"})

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.firstReleaseLastCommit/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Metadata.version/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.state/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload/__typename
  #{"ToggleAwardEmojiPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/onlyAllowMergeIfPipelineSucceeds
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.assignees/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Discussion))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions.reopenIssue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/dueDate
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.User.snippets/ids
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/ID :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs/Project
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Project/archived
    :gql.git-lab-specs.Project/avatarUrl
    :gql.git-lab-specs.Project/containerRegistryEnabled
    :gql.git-lab-specs.Project/createdAt
    :gql.git-lab-specs.Project/description
    :gql.git-lab-specs.Project/descriptionHtml
    :gql.git-lab-specs.Project/forksCount
    :gql.git-lab-specs.Project/fullPath
    :gql.git-lab-specs.Project/group
    :gql.git-lab-specs.Project/httpUrlToRepo
    :gql.git-lab-specs.Project/id
    :gql.git-lab-specs.Project/importStatus
    :gql.git-lab-specs.Project/issue
    :gql.git-lab-specs.Project/issues
    :gql.git-lab-specs.Project/issuesEnabled
    :gql.git-lab-specs.Project/jobsEnabled
    :gql.git-lab-specs.Project/lastActivityAt
    :gql.git-lab-specs.Project/lfsEnabled
    :gql.git-lab-specs.Project/mergeRequest
    :gql.git-lab-specs.Project/mergeRequests
    :gql.git-lab-specs.Project/mergeRequestsEnabled
    :gql.git-lab-specs.Project/mergeRequestsFfOnlyEnabled
    :gql.git-lab-specs.Project/name
    :gql.git-lab-specs.Project/nameWithNamespace
    :gql.git-lab-specs.Project/namespace
    :gql.git-lab-specs.Project/onlyAllowMergeIfAllDiscussionsAreResolved
    :gql.git-lab-specs.Project/onlyAllowMergeIfPipelineSucceeds
    :gql.git-lab-specs.Project/openIssuesCount
    :gql.git-lab-specs.Project/path
    :gql.git-lab-specs.Project/pipelines
    :gql.git-lab-specs.Project/printingMergeRequestLinkEnabled
    :gql.git-lab-specs.Project/publicJobs
    :gql.git-lab-specs.Project/removeSourceBranchAfterMerge
    :gql.git-lab-specs.Project/repository
    :gql.git-lab-specs.Project/requestAccessEnabled
    :gql.git-lab-specs.Project/sentryDetailedError
    :gql.git-lab-specs.Project/sharedRunnersEnabled
    :gql.git-lab-specs.Project/snippets
    :gql.git-lab-specs.Project/snippetsEnabled
    :gql.git-lab-specs.Project/sshUrlToRepo
    :gql.git-lab-specs.Project/starCount
    :gql.git-lab-specs.Project/statistics
    :gql.git-lab-specs.Project/tagList
    :gql.git-lab-specs.Project/userPermissions
    :gql.git-lab-specs.Project/visibility
    :gql.git-lab-specs.Project/webUrl
    :gql.git-lab-specs.Project/wikiEnabled
    :gql.git-lab-specs.Project/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.y/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.allowCollaboration/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/createdAfter
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.User.snippets/visibility
  (clojure.spec.alpha/nilable :gql.git-lab-specs/VisibilityScopesEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Snippet))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.newLine/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/DiffPathsInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DiffPathsInput/newPath :gql.git-lab-specs.DiffPathsInput/oldPath]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.EntryType/tree #{"tree"})

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.titleHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TaskCompletionStatus.count/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.interfaces/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffRefs.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/__typename #{"Milestone"})

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.possibleTypes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.labels/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/visibility
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/sourceProjectId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/createdBefore
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.discussions/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequest.discussions/after
    :gql.git-lab-specs.MergeRequest.discussions/before
    :gql.git-lab-specs.MergeRequest.discussions/first
    :gql.git-lab-specs.MergeRequest.discussions/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue/__typename #{"__EnumValue"})

(clojure.spec.alpha/def :gql.git-lab-specs.Group.path/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoTargetEnum/COMMIT #{"COMMIT"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/mergeError
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.GroupPermissions.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestorePayload.todo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.reference/&args
  (clojure.spec.alpha/keys :opt-un [:gql.git-lab-specs.MergeRequest.reference/full] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.readPagesContent/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDonePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.forkProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.closedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNotePayload/note
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Note))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field/deprecationReason
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorFrequency.count/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.publicJobs/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.pipelines/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.detailedStatus/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestonePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.todosMarkAllDone/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.todosMarkAllDone/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.labels/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Issue.labels/after
    :gql.git-lab-specs.Issue.labels/before
    :gql.git-lab-specs.Issue.labels/first
    :gql.git-lab-specs.Issue.labels/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/destroyNote
  (clojure.spec.alpha/nilable :gql.git-lab-specs/DestroyNotePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.discussions/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo/startCursor
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Snippet)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.issueSetDueDate/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.issueSetDueDate/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/avatarUrl
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.pipelines/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/INTERFACE #{"INTERFACE"})

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPositionInput/oldLine
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.forksCount/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Pipeline)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.User.avatarUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.assignees/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.projects/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/SKIPPED #{"SKIPPED"})

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.authorName/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestConnection/__typename
  #{"MergeRequestConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/name
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/createSnippet
  (clojure.spec.alpha/nilable :gql.git-lab-specs/CreateSnippetPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.destroyPages/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNotePayload/note
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Note))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/sort
  (clojure.spec.alpha/nilable :gql.git-lab-specs/IssueSort))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/SCALAR #{"SCALAR"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.shouldBeRebased/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Label.descriptionHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetLabelsPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetLabelsPayload/clientMutationId
    :gql.git-lab-specs.MergeRequestSetLabelsPayload/errors
    :gql.git-lab-specs.MergeRequestSetLabelsPayload/mergeRequest
    :gql.git-lab-specs.MergeRequestSetLabelsPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.fields/&args
  (clojure.spec.alpha/keys :opt-un [:gql.git-lab-specs.__Type.fields/includeDeprecated] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/todoRestore
  (clojure.spec.alpha/nilable :gql.git-lab-specs/TodoRestorePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.adminProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.dueDate/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDonePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.participants/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/PipelineStatusEnum
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :PipelineStatusEnum/CANCELED
    :gql.git-lab-specs.PipelineStatusEnum/CANCELED
    :PipelineStatusEnum/CREATED
    :gql.git-lab-specs.PipelineStatusEnum/CREATED
    :PipelineStatusEnum/FAILED
    :gql.git-lab-specs.PipelineStatusEnum/FAILED
    :PipelineStatusEnum/MANUAL
    :gql.git-lab-specs.PipelineStatusEnum/MANUAL
    :PipelineStatusEnum/PENDING
    :gql.git-lab-specs.PipelineStatusEnum/PENDING
    :PipelineStatusEnum/PREPARING
    :gql.git-lab-specs.PipelineStatusEnum/PREPARING
    :PipelineStatusEnum/RUNNING
    :gql.git-lab-specs.PipelineStatusEnum/RUNNING
    :PipelineStatusEnum/SCHEDULED
    :gql.git-lab-specs.PipelineStatusEnum/SCHEDULED
    :PipelineStatusEnum/SKIPPED
    :gql.git-lab-specs.PipelineStatusEnum/SKIPPED
    :PipelineStatusEnum/SUCCESS
    :gql.git-lab-specs.PipelineStatusEnum/SUCCESS)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/openIssuesCount
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestState/opened #{"opened"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.rebaseInProgress/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.submodules/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/CreateSnippetInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.CreateSnippetInput/clientMutationId
    :gql.git-lab-specs.CreateSnippetInput/description
    :gql.git-lab-specs.CreateSnippetInput/fileName
    :gql.git-lab-specs.CreateSnippetInput/projectPath]
   :req-un
   [:gql.git-lab-specs.CreateSnippetInput/content
    :gql.git-lab-specs.CreateSnippetInput/title
    :gql.git-lab-specs.CreateSnippetInput/visibilityLevel]))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Pipeline))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/treeUrl
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.notes/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/IssueSort
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :IssueSort/DUE_DATE_ASC
    :gql.git-lab-specs.IssueSort/DUE_DATE_ASC
    :IssueSort/DUE_DATE_DESC
    :gql.git-lab-specs.IssueSort/DUE_DATE_DESC
    :IssueSort/RELATIVE_POSITION_ASC
    :gql.git-lab-specs.IssueSort/RELATIVE_POSITION_ASC
    :IssueSort/created_asc
    :gql.git-lab-specs.IssueSort/created_asc
    :IssueSort/created_desc
    :gql.git-lab-specs.IssueSort/created_desc
    :IssueSort/updated_asc
    :gql.git-lab-specs.IssueSort/updated_asc
    :IssueSort/updated_desc
    :gql.git-lab-specs.IssueSort/updated_desc)))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.group/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequests/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestorePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.mergeStatus/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.rootStorageStatistics/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/DestroySnippetPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DestroySnippetPayload/clientMutationId
    :gql.git-lab-specs.DestroySnippetPayload/errors
    :gql.git-lab-specs.DestroySnippetPayload/snippet
    :gql.git-lab-specs.DestroySnippetPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/DestroyNoteInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DestroyNoteInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.DestroyNoteInput/id]))

(clojure.spec.alpha/def :gql.git-lab-specs.Group/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/IssueSetDueDateInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.IssueSetDueDateInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.IssueSetDueDateInput/dueDate
    :gql.git-lab-specs.IssueSetDueDateInput/iid
    :gql.git-lab-specs.IssueSetDueDateInput/projectPath]))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNotePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions.adminIssue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive/__typename #{"__Directive"})

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDatePayload/__typename
  #{"IssueSetDueDatePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.pushToSourceBranch/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/mergeRequestSetLabels
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequestSetLabelsPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions.awardEmoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.labels/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/UpdateNotePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.UpdateNotePayload/clientMutationId
    :gql.git-lab-specs.UpdateNotePayload/errors
    :gql.git-lab-specs.UpdateNotePayload/note
    :gql.git-lab-specs.UpdateNotePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.pipelines/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelinePermissions.destroyPipeline/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.reference/full
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/toggleAwardEmoji
  (clojure.spec.alpha/nilable :gql.git-lab-specs/ToggleAwardEmojiPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiPayload.awardEmoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.pipelines/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/participants
  (clojure.spec.alpha/nilable :gql.git-lab-specs/UserConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.notes/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Snippet.notes/after
    :gql.git-lab-specs.Snippet.notes/before
    :gql.git-lab-specs.Snippet.notes/first
    :gql.git-lab-specs.Snippet.notes/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Entry.sha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/TodoTargetEnum
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :TodoTargetEnum/COMMIT
    :gql.git-lab-specs.TodoTargetEnum/COMMIT
    :TodoTargetEnum/ISSUE
    :gql.git-lab-specs.TodoTargetEnum/ISSUE
    :TodoTargetEnum/MERGEREQUEST
    :gql.git-lab-specs.TodoTargetEnum/MERGEREQUEST)))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPositionType/image #{"image"})

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/descriptionHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.userNotesCount/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Mutation
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Mutation/addAwardEmoji
    :gql.git-lab-specs.Mutation/createDiffNote
    :gql.git-lab-specs.Mutation/createImageDiffNote
    :gql.git-lab-specs.Mutation/createNote
    :gql.git-lab-specs.Mutation/createSnippet
    :gql.git-lab-specs.Mutation/destroyNote
    :gql.git-lab-specs.Mutation/destroySnippet
    :gql.git-lab-specs.Mutation/issueSetConfidential
    :gql.git-lab-specs.Mutation/issueSetDueDate
    :gql.git-lab-specs.Mutation/markAsSpamSnippet
    :gql.git-lab-specs.Mutation/mergeRequestSetAssignees
    :gql.git-lab-specs.Mutation/mergeRequestSetLabels
    :gql.git-lab-specs.Mutation/mergeRequestSetLocked
    :gql.git-lab-specs.Mutation/mergeRequestSetMilestone
    :gql.git-lab-specs.Mutation/mergeRequestSetSubscription
    :gql.git-lab-specs.Mutation/mergeRequestSetWip
    :gql.git-lab-specs.Mutation/removeAwardEmoji
    :gql.git-lab-specs.Mutation/todoMarkDone
    :gql.git-lab-specs.Mutation/todoRestore
    :gql.git-lab-specs.Mutation/todosMarkAllDone
    :gql.git-lab-specs.Mutation/toggleAwardEmoji
    :gql.git-lab-specs.Mutation/updateNote
    :gql.git-lab-specs.Mutation/updateSnippet
    :gql.git-lab-specs.Mutation/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group/lfsEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.discussions/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/ENUM_VALUE #{"ENUM_VALUE"})

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/IssuePermissions
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.IssuePermissions/adminIssue
    :gql.git-lab-specs.IssuePermissions/createNote
    :gql.git-lab-specs.IssuePermissions/readIssue
    :gql.git-lab-specs.IssuePermissions/reopenIssue
    :gql.git-lab-specs.IssuePermissions/updateIssue
    :gql.git-lab-specs.IssuePermissions/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.updatedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.pipelines/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoStateEnum/done #{"done"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project/descriptionHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestEdge/__typename #{"MergeRequestEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.sentryProjectSlug/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji.user/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/pipelines
  (clojure.spec.alpha/nilable :gql.git-lab-specs/PipelineConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/INPUT_FIELD_DEFINITION
  #{"INPUT_FIELD_DEFINITION"})

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/project
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Project))

(clojure.spec.alpha/def :gql.git-lab-specs.User.userPermissions/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema.mutationType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Entry.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.sentryProjectName/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/issuesEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNoteInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.sourceBranchExists/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/onlyAllowMergeIfAllDiscussionsAreResolved
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.participants/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/closedBefore
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs/UpdateSnippetInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.UpdateSnippetInput/clientMutationId
    :gql.git-lab-specs.UpdateSnippetInput/content
    :gql.git-lab-specs.UpdateSnippetInput/description
    :gql.git-lab-specs.UpdateSnippetInput/fileName
    :gql.git-lab-specs.UpdateSnippetInput/title
    :gql.git-lab-specs.UpdateSnippetInput/visibilityLevel]
   :req-un
   [:gql.git-lab-specs.UpdateSnippetInput/id]))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.flatPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorFrequency/__typename
  #{"SentryErrorFrequency"})

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/newPath
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/inProgressMergeCommitSha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNoteInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/DiffPositionType
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :DiffPositionType/image
    :gql.git-lab-specs.DiffPositionType/image
    :DiffPositionType/text
    :gql.git-lab-specs.DiffPositionType/text)))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.userCount/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Label.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.treeUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.participants/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Issue.participants/after
    :gql.git-lab-specs.Issue.participants/before
    :gql.git-lab-specs.Issue.participants/first
    :gql.git-lab-specs.Issue.participants/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.authoredDate/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetPayload/snippet
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Snippet))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/x
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createLabel/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.submodules/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/LabelConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.LabelConnection/edges
    :gql.git-lab-specs.LabelConnection/nodes
    :gql.git-lab-specs.LabelConnection/pageInfo
    :gql.git-lab-specs.LabelConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/TreeEntryEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/printingMergeRequestLinkEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.assignees/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Issue.assignees/after
    :gql.git-lab-specs.Issue.assignees/before
    :gql.git-lab-specs.Issue.assignees/first
    :gql.git-lab-specs.Issue.assignees/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/httpUrlToRepo
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/signatureHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.snippets/ids
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/ID :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.forceRemoveSourceBranch/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.resolvable/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.snippets/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/archived
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/LabelEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.iid/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/__typename
  #{"MergeRequestPermissions"})

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.sha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.externalUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TaskCompletionStatus/__typename
  #{"TaskCompletionStatus"})

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.notes/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.metadata/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema.queryType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/INLINE_FRAGMENT #{"INLINE_FRAGMENT"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.pipelines/status
  (clojure.spec.alpha/nilable :gql.git-lab-specs/PipelineStatusEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/milestone
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Milestone))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createWiki/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/titleHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.mergeCommitMessage/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.message/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.descriptionHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiPayload/awardEmoji
  (clojure.spec.alpha/nilable :gql.git-lab-specs/AwardEmoji))

(clojure.spec.alpha/def :gql.git-lab-specs.Note/__typename #{"Note"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Project))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.requestAccess/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.diffHeadSha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/labels
  (clojure.spec.alpha/nilable :gql.git-lab-specs/LabelConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Issue))

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics.storageSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.discussions/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/ProjectPermissions
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.ProjectPermissions/adminOperations
    :gql.git-lab-specs.ProjectPermissions/adminProject
    :gql.git-lab-specs.ProjectPermissions/adminRemoteMirror
    :gql.git-lab-specs.ProjectPermissions/adminWiki
    :gql.git-lab-specs.ProjectPermissions/archiveProject
    :gql.git-lab-specs.ProjectPermissions/changeNamespace
    :gql.git-lab-specs.ProjectPermissions/changeVisibilityLevel
    :gql.git-lab-specs.ProjectPermissions/createDeployment
    :gql.git-lab-specs.ProjectPermissions/createIssue
    :gql.git-lab-specs.ProjectPermissions/createLabel
    :gql.git-lab-specs.ProjectPermissions/createMergeRequestFrom
    :gql.git-lab-specs.ProjectPermissions/createMergeRequestIn
    :gql.git-lab-specs.ProjectPermissions/createPages
    :gql.git-lab-specs.ProjectPermissions/createPipeline
    :gql.git-lab-specs.ProjectPermissions/createPipelineSchedule
    :gql.git-lab-specs.ProjectPermissions/createSnippet
    :gql.git-lab-specs.ProjectPermissions/createWiki
    :gql.git-lab-specs.ProjectPermissions/destroyPages
    :gql.git-lab-specs.ProjectPermissions/destroyWiki
    :gql.git-lab-specs.ProjectPermissions/downloadCode
    :gql.git-lab-specs.ProjectPermissions/downloadWikiCode
    :gql.git-lab-specs.ProjectPermissions/forkProject
    :gql.git-lab-specs.ProjectPermissions/pushCode
    :gql.git-lab-specs.ProjectPermissions/pushToDeleteProtectedBranch
    :gql.git-lab-specs.ProjectPermissions/readCommitStatus
    :gql.git-lab-specs.ProjectPermissions/readCycleAnalytics
    :gql.git-lab-specs.ProjectPermissions/readPagesContent
    :gql.git-lab-specs.ProjectPermissions/readProject
    :gql.git-lab-specs.ProjectPermissions/readProjectMember
    :gql.git-lab-specs.ProjectPermissions/readWiki
    :gql.git-lab-specs.ProjectPermissions/removeForkProject
    :gql.git-lab-specs.ProjectPermissions/removePages
    :gql.git-lab-specs.ProjectPermissions/removeProject
    :gql.git-lab-specs.ProjectPermissions/renameProject
    :gql.git-lab-specs.ProjectPermissions/requestAccess
    :gql.git-lab-specs.ProjectPermissions/updatePages
    :gql.git-lab-specs.ProjectPermissions/updateWiki
    :gql.git-lab-specs.ProjectPermissions/uploadFile
    :gql.git-lab-specs.ProjectPermissions/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.body/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetMilestone/&args
  (clojure.spec.alpha/keys
   :opt-un
   []
   :req-un
   [:gql.git-lab-specs.Mutation.mergeRequestSetMilestone/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/assignees
  (clojure.spec.alpha/nilable :gql.git-lab-specs/UserConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/LabelEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.LabelEdge/cursor
    :gql.git-lab-specs.LabelEdge/node
    :gql.git-lab-specs.LabelEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.group/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.targetBranch/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.userPermissions/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/BlobEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesPayload.mergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MutationOperationMode/REPLACE #{"REPLACE"})

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.markAsSpamSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.markAsSpamSnippet/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetLocked/&args
  (clojure.spec.alpha/keys
   :opt-un
   []
   :req-un
   [:gql.git-lab-specs.Mutation.mergeRequestSetLocked/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/CREATED #{"CREATED"})

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/type
  (clojure.spec.alpha/nilable :gql.git-lab-specs/TypeEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.sha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/__typename #{"Submodule"})

(clojure.spec.alpha/def :gql.git-lab-specs.Query/currentUser
  (clojure.spec.alpha/nilable :gql.git-lab-specs/User))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestonePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/CreateDiffNoteInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.CreateDiffNoteInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.CreateDiffNoteInput/body
    :gql.git-lab-specs.CreateDiffNoteInput/noteableId
    :gql.git-lab-specs.CreateDiffNoteInput/position]))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.discussions/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.downvotes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.pushCode/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo/endCursor
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.VisibilityScopesEnum/private #{"private"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.notes/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.UserConnection.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/oldPath
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.taskCompletionStatus/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics.storageSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoTargetEnum/ISSUE #{"ISSUE"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.removeForkProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/todoMarkDone
  (clojure.spec.alpha/nilable :gql.git-lab-specs/TodoMarkDonePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/descriptionHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/removeSourceBranchAfterMerge
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/state
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/TodoStateEnum :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSort/RELATIVE_POSITION_ASC
  #{"RELATIVE_POSITION_ASC"})

(clojure.spec.alpha/def :gql.git-lab-specs/TreeEntry
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TreeEntry/flatPath
    :gql.git-lab-specs.TreeEntry/id
    :gql.git-lab-specs.TreeEntry/name
    :gql.git-lab-specs.TreeEntry/path
    :gql.git-lab-specs.TreeEntry/sha
    :gql.git-lab-specs.TreeEntry/type
    :gql.git-lab-specs.TreeEntry/webUrl
    :gql.git-lab-specs.TreeEntry/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.createNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/webUrl
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.User.snippets/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.discussions/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/DiscussionEdge
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DiscussionEdge/cursor
    :gql.git-lab-specs.DiscussionEdge/node
    :gql.git-lab-specs.DiscussionEdge/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.inputFields/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Todo)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.readWiki/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.sentryId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Project.issues/after
    :gql.git-lab-specs.Project.issues/before
    :gql.git-lab-specs.Project.issues/closedAfter
    :gql.git-lab-specs.Project.issues/closedBefore
    :gql.git-lab-specs.Project.issues/createdAfter
    :gql.git-lab-specs.Project.issues/createdBefore
    :gql.git-lab-specs.Project.issues/first
    :gql.git-lab-specs.Project.issues/iid
    :gql.git-lab-specs.Project.issues/iids
    :gql.git-lab-specs.Project.issues/labelName
    :gql.git-lab-specs.Project.issues/last
    :gql.git-lab-specs.Project.issues/search
    :gql.git-lab-specs.Project.issues/sort
    :gql.git-lab-specs.Project.issues/state
    :gql.git-lab-specs.Project.issues/updatedAfter
    :gql.git-lab-specs.Project.issues/updatedBefore]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.projects/includeSubgroups
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.notes/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive.onOperation/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.discussionLocked/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User.snippets/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/ToggleAwardEmojiPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.ToggleAwardEmojiPayload/awardEmoji
    :gql.git-lab-specs.ToggleAwardEmojiPayload/clientMutationId
    :gql.git-lab-specs.ToggleAwardEmojiPayload/errors
    :gql.git-lab-specs.ToggleAwardEmojiPayload/toggledOn
    :gql.git-lab-specs.ToggleAwardEmojiPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetInput/projectPath
  (clojure.spec.alpha/nilable :gql.git-lab-specs/ID))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/sourceProject
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Project))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsInput/operationMode
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MutationOperationMode))

(clojure.spec.alpha/def :gql.git-lab-specs.Label.color/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/QUERY #{"QUERY"})

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.updateSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.updateSnippet/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/state
  (clojure.spec.alpha/nilable :gql.git-lab-specs/IssuableState))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.projects/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequests/iids
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.lastReleaseLastCommit/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.rootStorageStatistics/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetInput/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/ToggleAwardEmojiInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.ToggleAwardEmojiInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.ToggleAwardEmojiInput/awardableId
    :gql.git-lab-specs.ToggleAwardEmojiInput/name]))

(clojure.spec.alpha/def :gql.git-lab-specs/DiscussionConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DiscussionConnection/edges
    :gql.git-lab-specs.DiscussionConnection/nodes
    :gql.git-lab-specs.DiscussionConnection/pageInfo
    :gql.git-lab-specs.DiscussionConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetPayload/__typename
  #{"DestroySnippetPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.subscribed/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.notes/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs/Todo
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Todo/action
    :gql.git-lab-specs.Todo/author
    :gql.git-lab-specs.Todo/body
    :gql.git-lab-specs.Todo/createdAt
    :gql.git-lab-specs.Todo/group
    :gql.git-lab-specs.Todo/id
    :gql.git-lab-specs.Todo/project
    :gql.git-lab-specs.Todo/state
    :gql.git-lab-specs.Todo/targetType
    :gql.git-lab-specs.Todo/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs/TodoRestorePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TodoRestorePayload/clientMutationId
    :gql.git-lab-specs.TodoRestorePayload/errors
    :gql.git-lab-specs.TodoRestorePayload/todo
    :gql.git-lab-specs.TodoRestorePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDoneInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue/defaultValue
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo.hasPreviousPage/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestonePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.bodyHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/labelName
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/String)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/visibility
  (clojure.spec.alpha/nilable :gql.git-lab-specs/VisibilityScopesEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/RUNNING #{"RUNNING"})

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/height
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.discussions/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/descriptionHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteConnection/__typename #{"NoteConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestState/locked #{"locked"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/ProjectEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.timeEstimate/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/updateNote
  (clojure.spec.alpha/nilable :gql.git-lab-specs/UpdateNotePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffRefs.baseSha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.totalTimeSpent/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.removeProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.updatedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/MarkAsSpamSnippetInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MarkAsSpamSnippetInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.MarkAsSpamSnippetInput/id]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.revertOnCurrentMergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query/namespace
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Namespace))

(clojure.spec.alpha/def :gql.git-lab-specs.UserPermissions.createSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoActionEnum/approval_required #{"approval_required"})

(clojure.spec.alpha/def :gql.git-lab-specs/Note
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Note/author
    :gql.git-lab-specs.Note/body
    :gql.git-lab-specs.Note/bodyHtml
    :gql.git-lab-specs.Note/createdAt
    :gql.git-lab-specs.Note/discussion
    :gql.git-lab-specs.Note/id
    :gql.git-lab-specs.Note/position
    :gql.git-lab-specs.Note/project
    :gql.git-lab-specs.Note/resolvable
    :gql.git-lab-specs.Note/resolvedAt
    :gql.git-lab-specs.Note/resolvedBy
    :gql.git-lab-specs.Note/system
    :gql.git-lab-specs.Note/updatedAt
    :gql.git-lab-specs.Note/userPermissions
    :gql.git-lab-specs.Note/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleConnection/__typename #{"SubmoduleConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/fields
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/__Field :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/closedAfter
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.removeSourceBranchAfterMerge/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.notes/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Issue.notes/after
    :gql.git-lab-specs.Issue.notes/before
    :gql.git-lab-specs.Issue.notes/first
    :gql.git-lab-specs.Issue.notes/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetSubscriptionPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetSubscriptionPayload/clientMutationId
    :gql.git-lab-specs.MergeRequestSetSubscriptionPayload/errors
    :gql.git-lab-specs.MergeRequestSetSubscriptionPayload/mergeRequest
    :gql.git-lab-specs.MergeRequestSetSubscriptionPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/IssueEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/mergeCommitMessage
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffImagePositionInput/baseSha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedPayload.mergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__TypeKind/ENUM #{"ENUM"})

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__TypeKind/NON_NULL #{"NON_NULL"})

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueState/closed #{"closed"})

(clojure.spec.alpha/def :gql.git-lab-specs/UserPermissions
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.UserPermissions/createSnippet :gql.git-lab-specs.UserPermissions/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.createImageDiffNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.createImageDiffNote/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/TaskCompletionStatus
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TaskCompletionStatus/completedCount
    :gql.git-lab-specs.TaskCompletionStatus/count
    :gql.git-lab-specs.TaskCompletionStatus/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetPayload/snippet
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Snippet))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.targetProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Group
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Group/avatarUrl
    :gql.git-lab-specs.Group/description
    :gql.git-lab-specs.Group/descriptionHtml
    :gql.git-lab-specs.Group/fullName
    :gql.git-lab-specs.Group/fullPath
    :gql.git-lab-specs.Group/id
    :gql.git-lab-specs.Group/lfsEnabled
    :gql.git-lab-specs.Group/name
    :gql.git-lab-specs.Group/parent
    :gql.git-lab-specs.Group/path
    :gql.git-lab-specs.Group/projects
    :gql.git-lab-specs.Group/requestAccessEnabled
    :gql.git-lab-specs.Group/rootStorageStatistics
    :gql.git-lab-specs.Group/userPermissions
    :gql.git-lab-specs.Group/visibility
    :gql.git-lab-specs.Group/webUrl
    :gql.git-lab-specs.Group/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleEdge/__typename #{"SubmoduleEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/rootStorageStatistics
  (clojure.spec.alpha/nilable :gql.git-lab-specs/RootStorageStatistics))

(clojure.spec.alpha/def :gql.git-lab-specs.UserEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteEdge/__typename #{"NoteEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/width
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestonePayload/__typename
  #{"MergeRequestSetMilestonePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.TodoActionEnum/assigned #{"assigned"})

(clojure.spec.alpha/def :gql.git-lab-specs.PipelinePermissions.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/project
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Project))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNotePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.UserConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.participants/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Todo.project/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.latestPipeline/status
  (clojure.spec.alpha/nilable :gql.git-lab-specs/PipelineStatusEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.resolvedBy/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.shouldRemoveSourceBranch/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field.isDeprecated/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/createdAt
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.system/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Discussion)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/updatedAfter
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/createdAfter
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoActionEnum/unmergeable #{"unmergeable"})

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/FIELD #{"FIELD"})

(clojure.spec.alpha/def :gql.git-lab-specs.__Field.args/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.User.snippets/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/TodosMarkAllDoneInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TodosMarkAllDoneInput/clientMutationId]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/iids
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Metadata/__typename #{"Metadata"})

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.adminRemoteMirror/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestonePayload/mergeRequest
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest))

(clojure.spec.alpha/def :gql.git-lab-specs.User.snippets/type
  (clojure.spec.alpha/nilable :gql.git-lab-specs/TypeEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoActionEnum/build_failed #{"build_failed"})

(clojure.spec.alpha/def :gql.git-lab-specs/UpdateSnippetPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.UpdateSnippetPayload/clientMutationId
    :gql.git-lab-specs.UpdateSnippetPayload/errors
    :gql.git-lab-specs.UpdateSnippetPayload/snippet
    :gql.git-lab-specs.UpdateSnippetPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query/snippets
  (clojure.spec.alpha/nilable :gql.git-lab-specs/SnippetConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/MANUAL #{"MANUAL"})

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.submodules/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiPayload/awardEmoji
  (clojure.spec.alpha/nilable :gql.git-lab-specs/AwardEmoji))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.notes/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.importStatus/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/__Schema
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.__Schema/directives
    :gql.git-lab-specs.__Schema/mutationType
    :gql.git-lab-specs.__Schema/queryType
    :gql.git-lab-specs.__Schema/subscriptionType
    :gql.git-lab-specs.__Schema/types
    :gql.git-lab-specs.__Schema/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.signatureHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequest/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Project.mergeRequest/iid :gql.git-lab-specs.Project.mergeRequest/iids]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics.commitCount/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/UserConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.UserConnection/edges
    :gql.git-lab-specs.UserConnection/nodes
    :gql.git-lab-specs.UserConnection/pageInfo
    :gql.git-lab-specs.UserConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs/CreateNotePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.CreateNotePayload/clientMutationId
    :gql.git-lab-specs.CreateNotePayload/errors
    :gql.git-lab-specs.CreateNotePayload/note
    :gql.git-lab-specs.CreateNotePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.UserConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.blobs/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.printingMergeRequestLinkEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.targetProjectId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/state
  (clojure.spec.alpha/nilable :gql.git-lab-specs/IssuableState))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.titleHtml/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/lfsEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.namespace/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.oldPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.inProgressMergeCommitSha/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group/requestAccessEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/headPipeline
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Pipeline))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema.types/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Milestone
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Milestone/createdAt
    :gql.git-lab-specs.Milestone/description
    :gql.git-lab-specs.Milestone/dueDate
    :gql.git-lab-specs.Milestone/id
    :gql.git-lab-specs.Milestone/startDate
    :gql.git-lab-specs.Milestone/state
    :gql.git-lab-specs.Milestone/title
    :gql.git-lab-specs.Milestone/updatedAt
    :gql.git-lab-specs.Milestone/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/mergeRequestSetSubscription
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequestSetSubscriptionPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/updateSnippet
  (clojure.spec.alpha/nilable :gql.git-lab-specs/UpdateSnippetPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query/__typename #{"Query"})

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/__typename #{"DiffPosition"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.pipelines/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/createDiffNote
  (clojure.spec.alpha/nilable :gql.git-lab-specs/CreateDiffNotePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.createdAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/mergeWhenPipelineSucceeds
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.ofType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.snippets/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Project.snippets/after
    :gql.git-lab-specs.Project.snippets/before
    :gql.git-lab-specs.Project.snippets/first
    :gql.git-lab-specs.Project.snippets/ids
    :gql.git-lab-specs.Project.snippets/last
    :gql.git-lab-specs.Project.snippets/visibility]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/IssueSetConfidentialPayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.IssueSetConfidentialPayload/clientMutationId
    :gql.git-lab-specs.IssueSetConfidentialPayload/errors
    :gql.git-lab-specs.IssueSetConfidentialPayload/issue
    :gql.git-lab-specs.IssueSetConfidentialPayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/message
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetPayload/__typename
  #{"CreateSnippetPayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project/sshUrlToRepo
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo.hasNextPage/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/issueSetConfidential
  (clojure.spec.alpha/nilable :gql.git-lab-specs/IssueSetConfidentialPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.diffRefs/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.icon/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics/wikiSize
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.trees/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.snippets/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoStateEnum/pending #{"pending"})

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema/directives
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/__Directive :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Label))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/PREPARING #{"PREPARING"})

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNotePayload/note
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Note))

(clojure.spec.alpha/def :gql.git-lab-specs.LabelConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Label)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.position/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNotePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.trees/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/PENDING #{"PENDING"})

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/TreeEntry))

(clojure.spec.alpha/def :gql.git-lab-specs/IssueConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.IssueConnection/edges
    :gql.git-lab-specs.IssueConnection/nodes
    :gql.git-lab-specs.IssueConnection/pageInfo
    :gql.git-lab-specs.IssueConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDoneInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/TreeEntry)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/search
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueState/opened #{"opened"})

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.projects/includeSubgroups
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.echo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Query.echo/text]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipPayload/mergeRequest
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest))

(clojure.spec.alpha/def :gql.git-lab-specs/TreeEntryConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TreeEntryConnection/edges
    :gql.git-lab-specs.TreeEntryConnection/nodes
    :gql.git-lab-specs.TreeEntryConnection/pageInfo
    :gql.git-lab-specs.TreeEntryConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions.adminNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.adminMergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelinePermissions.adminPipeline/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetInput/title
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/finishedAt
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDatePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/title
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.kind/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDonePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics.lfsObjectsSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.project/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.content/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.starCount/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TypeEnum/project #{"project"})

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.pipelines/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.mergeWhenPipelineSucceeds/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestorePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.UserEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive.onFragment/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/SnippetEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.notes/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialPayload.issue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group/avatarUrl
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions.readMergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics.lfsObjectsSize/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNotePayload.note/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.userPermissions/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/ENUM #{"ENUM"})

(clojure.spec.alpha/def :gql.git-lab-specs.Group/parent
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Group))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.userNotesCount/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/authorId
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/ID :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/sort
  (clojure.spec.alpha/nilable :gql.git-lab-specs/IssueSort))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorStatus/RESOLVED #{"RESOLVED"})

(clojure.spec.alpha/def :gql.git-lab-specs/DestroyNotePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.DestroyNotePayload/clientMutationId
    :gql.git-lab-specs.DestroyNotePayload/errors
    :gql.git-lab-specs.DestroyNotePayload/note
    :gql.git-lab-specs.DestroyNotePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Note/discussion
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Discussion))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.destroySnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.destroySnippet/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequestsFfOnlyEnabled/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNotePayload/note
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Note))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/issueSetDueDate
  (clojure.spec.alpha/nilable :gql.git-lab-specs/IssueSetDueDatePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.User.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/snippetsEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSort/DUE_DATE_ASC #{"DUE_DATE_ASC"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.downloadWikiCode/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorFrequency.time/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/descriptionHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Blob)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNotePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Group/visibility
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.BlobEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Blob))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesInput/operationMode
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MutationOperationMode))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.mergeRequests/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Project.mergeRequests/after
    :gql.git-lab-specs.Project.mergeRequests/before
    :gql.git-lab-specs.Project.mergeRequests/first
    :gql.git-lab-specs.Project.mergeRequests/iid
    :gql.git-lab-specs.Project.mergeRequests/iids
    :gql.git-lab-specs.Project.mergeRequests/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetInput/fileName
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/author
  (clojure.spec.alpha/nilable :gql.git-lab-specs/User))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.title/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User/__typename #{"User"})

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.fullName/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetLabelsInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetLabelsInput/clientMutationId
    :gql.git-lab-specs.MergeRequestSetLabelsInput/operationMode]
   :req-un
   [:gql.git-lab-specs.MergeRequestSetLabelsInput/iid
    :gql.git-lab-specs.MergeRequestSetLabelsInput/labelIds
    :gql.git-lab-specs.MergeRequestSetLabelsInput/projectPath]))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions/__typename #{"IssuePermissions"})

(clojure.spec.alpha/def :gql.git-lab-specs.Group.avatarUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.pipelines/status
  (clojure.spec.alpha/nilable :gql.git-lab-specs/PipelineStatusEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.author/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/rebaseCommitSha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.mergeError/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions.updateIssue/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNotePayload.note/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository.rootRef/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.projects/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/SubmoduleConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.SubmoduleConnection/edges
    :gql.git-lab-specs.SubmoduleConnection/nodes
    :gql.git-lab-specs.SubmoduleConnection/pageInfo
    :gql.git-lab-specs.SubmoduleConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.trees/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDonePayload/__typename
  #{"TodosMarkAllDonePayload"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.pipelines/status
  (clojure.spec.alpha/nilable :gql.git-lab-specs/PipelineStatusEnum))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.iid/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/diffHeadSha
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/webUrl
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.resolvedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/MutationOperationMode
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :MutationOperationMode/APPEND
    :gql.git-lab-specs.MutationOperationMode/APPEND
    :MutationOperationMode/REMOVE
    :gql.git-lab-specs.MutationOperationMode/REMOVE
    :MutationOperationMode/REPLACE
    :gql.git-lab-specs.MutationOperationMode/REPLACE)))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions.updateSnippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.userPermissions/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.VisibilityScopesEnum/public #{"public"})

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.height/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestoneInput/milestoneId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/ID))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/titleHtml
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.pushToDeleteProtectedBranch/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Submodule
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Submodule/flatPath
    :gql.git-lab-specs.Submodule/id
    :gql.git-lab-specs.Submodule/name
    :gql.git-lab-specs.Submodule/path
    :gql.git-lab-specs.Submodule/sha
    :gql.git-lab-specs.Submodule/treeUrl
    :gql.git-lab-specs.Submodule/type
    :gql.git-lab-specs.Submodule/webUrl
    :gql.git-lab-specs.Submodule/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/FIELD_DEFINITION
  #{"FIELD_DEFINITION"})

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/firstReleaseShortVersion
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/closedAfter
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.discussions/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/__typename #{"ProjectPermissions"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project.lastActivityAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineConnection/edges
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/PipelineEdge)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Group/rootStorageStatistics
  (clojure.spec.alpha/nilable :gql.git-lab-specs/RootStorageStatistics))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.frequency/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.projects/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Namespace.projects/after
    :gql.git-lab-specs.Namespace.projects/before
    :gql.git-lab-specs.Namespace.projects/first
    :gql.git-lab-specs.Namespace.projects/includeSubgroups
    :gql.git-lab-specs.Namespace.projects/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.assignees/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequest.assignees/after
    :gql.git-lab-specs.MergeRequest.assignees/before
    :gql.git-lab-specs.MergeRequest.assignees/first
    :gql.git-lab-specs.MergeRequest.assignees/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNotePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPositionType/text #{"text"})

(clojure.spec.alpha/def :gql.git-lab-specs.TypeEnum/personal #{"personal"})

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/markAsSpamSnippet
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MarkAsSpamSnippetPayload))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs/__Field
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.__Field/args
    :gql.git-lab-specs.__Field/deprecationReason
    :gql.git-lab-specs.__Field/description
    :gql.git-lab-specs.__Field/isDeprecated
    :gql.git-lab-specs.__Field/name
    :gql.git-lab-specs.__Field/type
    :gql.git-lab-specs.__Field/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository.tree/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Repository.tree/path
    :gql.git-lab-specs.Repository.tree/recursive
    :gql.git-lab-specs.Repository.tree/ref]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsPayload/mergeRequest
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field/args
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/__InputValue :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Project)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/relativePosition
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetPayload.snippet/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/Boolean clojure.core/boolean?)

(clojure.spec.alpha/def :gql.git-lab-specs.Label.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.toggleAwardEmoji/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.toggleAwardEmoji/input]))

(clojure.spec.alpha/def :gql.git-lab-specs/__Type
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.__Type/description
    :gql.git-lab-specs.__Type/enumValues
    :gql.git-lab-specs.__Type/fields
    :gql.git-lab-specs.__Type/inputFields
    :gql.git-lab-specs.__Type/interfaces
    :gql.git-lab-specs.__Type/kind
    :gql.git-lab-specs.__Type/name
    :gql.git-lab-specs.__Type/ofType
    :gql.git-lab-specs.__Type/possibleTypes
    :gql.git-lab-specs.__Type/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueConnection/nodes
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/Issue)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.favicon/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions.resolveNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNoteInput/discussionId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/ID))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNotePayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.UserConnection.pageInfo/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.firstReleaseShortVersion/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.pipelines/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.blobs/first
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.description/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/labels
  (clojure.spec.alpha/nilable :gql.git-lab-specs/LabelConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus.label/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.taskCompletionStatus/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Blob.lfsOid/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema/mutationType
  (clojure.spec.alpha/nilable :gql.git-lab-specs/__Type))

(clojure.spec.alpha/def :gql.git-lab-specs.Repository/__typename #{"Repository"})

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetPayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.readCommitStatus/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type.fields/includeDeprecated
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineConnection.edges/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/updatedAfter
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline.startedAt/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/projectId
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/ID :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/lastReleaseLastCommit
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs/SentryErrorStatus
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :SentryErrorStatus/IGNORED
    :gql.git-lab-specs.SentryErrorStatus/IGNORED
    :SentryErrorStatus/RESOLVED
    :gql.git-lab-specs.SentryErrorStatus/RESOLVED
    :SentryErrorStatus/RESOLVED_IN_NEXT_RELEASE
    :gql.git-lab-specs.SentryErrorStatus/RESOLVED_IN_NEXT_RELEASE
    :SentryErrorStatus/UNRESOLVED
    :gql.git-lab-specs.SentryErrorStatus/UNRESOLVED)))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.shortId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.author/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project/mergeRequestsFfOnlyEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineStatusEnum/SUCCESS #{"SUCCESS"})

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/TodosMarkAllDonePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.TodosMarkAllDonePayload/clientMutationId
    :gql.git-lab-specs.TodosMarkAllDonePayload/errors
    :gql.git-lab-specs.TodosMarkAllDonePayload/updatedIds
    :gql.git-lab-specs.TodosMarkAllDonePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestEdge/node
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.changeNamespace/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issues/iid
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/assignees
  (clojure.spec.alpha/nilable :gql.git-lab-specs/UserConnection))

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload/errors
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/String :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNotePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__TypeKind/OBJECT #{"OBJECT"})

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition.filePath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoConnection.nodes/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.projects/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/description
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.visibility/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/__typename #{"Mutation"})

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialPayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError.status/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive/locations
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/__DirectiveLocation :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoActionEnum/marked #{"marked"})

(clojure.spec.alpha/def :gql.git-lab-specs/NoteConnection
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.NoteConnection/edges
    :gql.git-lab-specs.NoteConnection/nodes
    :gql.git-lab-specs.NoteConnection/pageInfo
    :gql.git-lab-specs.NoteConnection/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.pipelines/ref
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace.fullPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo.startCursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.VisibilityScopesEnum/internal #{"internal"})

(clojure.spec.alpha/def :gql.git-lab-specs.Commit.pipelines/ref
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/webUrl
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.avatarUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue.type/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.discussionLocked/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createPipeline/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/enumValues
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of :gql.git-lab-specs/__EnumValue :kind clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Entry.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable.discussions/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.visibilityLevel/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/allowCollaboration
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs/CreateDiffNotePayload
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.CreateDiffNotePayload/clientMutationId
    :gql.git-lab-specs.CreateDiffNotePayload/errors
    :gql.git-lab-specs.CreateDiffNotePayload/note
    :gql.git-lab-specs.CreateDiffNotePayload/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.path/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji/__typename #{"AwardEmoji"})

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.sourceProject/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestState/merged #{"merged"})

(clojure.spec.alpha/def :gql.git-lab-specs/Pipeline
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Pipeline/beforeSha
    :gql.git-lab-specs.Pipeline/committedAt
    :gql.git-lab-specs.Pipeline/coverage
    :gql.git-lab-specs.Pipeline/createdAt
    :gql.git-lab-specs.Pipeline/detailedStatus
    :gql.git-lab-specs.Pipeline/duration
    :gql.git-lab-specs.Pipeline/finishedAt
    :gql.git-lab-specs.Pipeline/id
    :gql.git-lab-specs.Pipeline/iid
    :gql.git-lab-specs.Pipeline/sha
    :gql.git-lab-specs.Pipeline/startedAt
    :gql.git-lab-specs.Pipeline/status
    :gql.git-lab-specs.Pipeline/updatedAt
    :gql.git-lab-specs.Pipeline/userPermissions
    :gql.git-lab-specs.Pipeline/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleEdge.node/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsPayload.mergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/EntryType
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :EntryType/blob
    :gql.git-lab-specs.EntryType/blob
    :EntryType/commit
    :gql.git-lab-specs.EntryType/commit
    :EntryType/tree
    :gql.git-lab-specs.EntryType/tree)))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/createdBefore
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.UserConnection/__typename #{"UserConnection"})

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.destroyNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Mutation.destroyNote/input]))

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation/createNote
  (clojure.spec.alpha/nilable :gql.git-lab-specs/CreateNotePayload))

(clojure.spec.alpha/def :gql.git-lab-specs.__DirectiveLocation/FRAGMENT_DEFINITION
  #{"FRAGMENT_DEFINITION"})

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.destroyWiki/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/TypeEnum
  (clojure.spec.alpha/nonconforming
   (clojure.spec.alpha/or
    :TypeEnum/personal
    :gql.git-lab-specs.TypeEnum/personal
    :TypeEnum/project
    :gql.git-lab-specs.TypeEnum/project)))

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema.subscriptionType/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestoreInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Metadata.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorStatus/RESOLVED_IN_NEXT_RELEASE
  #{"RESOLVED_IN_NEXT_RELEASE"})

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNotePayload/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorStatus/IGNORED #{"IGNORED"})

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion/__typename #{"Discussion"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionPayload/mergeRequest
  (clojure.spec.alpha/nilable :gql.git-lab-specs/MergeRequest))

(clojure.spec.alpha/def :gql.git-lab-specs/MergeRequestSetLockedInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequestSetLockedInput/clientMutationId]
   :req-un
   [:gql.git-lab-specs.MergeRequestSetLockedInput/iid
    :gql.git-lab-specs.MergeRequestSetLockedInput/locked
    :gql.git-lab-specs.MergeRequestSetLockedInput/projectPath]))

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone.dueDate/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNotePayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.User.todos/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.User.todos/action
    :gql.git-lab-specs.User.todos/after
    :gql.git-lab-specs.User.todos/authorId
    :gql.git-lab-specs.User.todos/before
    :gql.git-lab-specs.User.todos/first
    :gql.git-lab-specs.User.todos/groupId
    :gql.git-lab-specs.User.todos/last
    :gql.git-lab-specs.User.todos/projectId
    :gql.git-lab-specs.User.todos/state
    :gql.git-lab-specs.User.todos/type]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.timeEstimate/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.relativePosition/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipPayload.mergeRequest/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/closedBefore
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Time))

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet.discussions/last
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Int))

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetEdge.cursor/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDatePayload.errors/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.NoteEdge.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.blobs/before
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.id/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSort/updated_asc #{"updated_asc"})

(clojure.spec.alpha/def :gql.git-lab-specs.UserEdge/__typename #{"UserEdge"})

(clojure.spec.alpha/def :gql.git-lab-specs.Project/tagList
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.PipelinePermissions/__typename #{"PipelinePermissions"})

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestonePayload.__typename/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.__Field.deprecationReason/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions.createDeployment/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedPayload.clientMutationId/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions.createNote/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry/webUrl
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/lfsEnabled
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.Project.issue/closedAfter
    :gql.git-lab-specs.Project.issue/closedBefore
    :gql.git-lab-specs.Project.issue/createdAfter
    :gql.git-lab-specs.Project.issue/createdBefore
    :gql.git-lab-specs.Project.issue/iid
    :gql.git-lab-specs.Project.issue/iids
    :gql.git-lab-specs.Project.issue/labelName
    :gql.git-lab-specs.Project.issue/search
    :gql.git-lab-specs.Project.issue/sort
    :gql.git-lab-specs.Project.issue/state
    :gql.git-lab-specs.Project.issue/updatedAfter
    :gql.git-lab-specs.Project.issue/updatedBefore]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Query.snippets/explore
  (clojure.spec.alpha/nilable :gql.git-lab-specs/Boolean))

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNoteInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.sentryDetailedError/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un [:gql.git-lab-specs.Project.sentryDetailedError/id]))

(clojure.spec.alpha/def :gql.git-lab-specs/__Directive
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.__Directive/args
    :gql.git-lab-specs.__Directive/description
    :gql.git-lab-specs.__Directive/locations
    :gql.git-lab-specs.__Directive/name
    :gql.git-lab-specs.__Directive/onField
    :gql.git-lab-specs.__Directive/onFragment
    :gql.git-lab-specs.__Directive/onOperation
    :gql.git-lab-specs.__Directive/__typename]))

(clojure.spec.alpha/def :gql.git-lab-specs.TodosMarkAllDonePayload/updatedIds
  (clojure.spec.alpha/coll-of :gql.git-lab-specs/ID :kind clojure.core/sequential?))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.issue/labelName
  (clojure.spec.alpha/nilable
   (clojure.spec.alpha/coll-of
    (clojure.spec.alpha/nilable :gql.git-lab-specs/String)
    :kind
    clojure.core/sequential?)))

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/visibility
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Tree.blobs/after
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.userPermissions/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionInput/clientMutationId
  (clojure.spec.alpha/nilable :gql.git-lab-specs/String))

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive.name/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Issue.webPath/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest.notes/&args
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.MergeRequest.notes/after
    :gql.git-lab-specs.MergeRequest.notes/before
    :gql.git-lab-specs.MergeRequest.notes/first
    :gql.git-lab-specs.MergeRequest.notes/last]
   :req-un
   []))

(clojure.spec.alpha/def :gql.git-lab-specs.Note.discussion/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs/CreateNoteInput
  (clojure.spec.alpha/keys
   :opt-un
   [:gql.git-lab-specs.CreateNoteInput/clientMutationId
    :gql.git-lab-specs.CreateNoteInput/discussionId]
   :req-un
   [:gql.git-lab-specs.CreateNoteInput/body :gql.git-lab-specs.CreateNoteInput/noteableId]))

(clojure.spec.alpha/def :gql.git-lab-specs.Project.userPermissions/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.Group.webUrl/&args
  (clojure.spec.alpha/keys :opt-un [] :req-un []))

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiInput/awardableId :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.AddAwardEmojiInput/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji/description :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji/emoji :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji/unicode :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji/unicodeVersion :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.AwardEmoji/user :gql.git-lab-specs/User)

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/flatPath :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/path :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/sha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Blob/type :gql.git-lab-specs/EntryType)

(clojure.spec.alpha/def :gql.git-lab-specs.BlobConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.BlobEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/sha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Commit/webUrl :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNoteInput/body :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNoteInput/noteableId :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateDiffNoteInput/position
  :gql.git-lab-specs/DiffPositionInput)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNoteInput/body :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNoteInput/noteableId
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateImageDiffNoteInput/position
  :gql.git-lab-specs/DiffImagePositionInput)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNoteInput/body :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateNoteInput/noteableId :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetInput/content :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetInput/title :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.CreateSnippetInput/visibilityLevel
  :gql.git-lab-specs/VisibilityLevelsEnum)

(clojure.spec.alpha/def :gql.git-lab-specs.DestroyNoteInput/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.DestroySnippetInput/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/detailsPath :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/favicon :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/group :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/hasDetails :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/icon :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/label :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/text :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DetailedStatus/tooltip :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffImagePositionInput/headSha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffImagePositionInput/height :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffImagePositionInput/paths
  :gql.git-lab-specs/DiffPathsInput)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffImagePositionInput/startSha
  :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffImagePositionInput/width :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffImagePositionInput/x :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffImagePositionInput/y :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/diffRefs :gql.git-lab-specs/DiffRefs)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/filePath :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPosition/positionType
  :gql.git-lab-specs/DiffPositionType)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPositionInput/headSha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPositionInput/newLine :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPositionInput/paths
  :gql.git-lab-specs/DiffPathsInput)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffPositionInput/startSha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffRefs/baseSha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffRefs/headSha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.DiffRefs/startSha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion/createdAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion/notes :gql.git-lab-specs/NoteConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Discussion/replyId :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionConnection/pageInfo
  :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.DiscussionEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Entry/flatPath :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Entry/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Entry/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Entry/path :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Entry/sha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Entry/type :gql.git-lab-specs/EntryType)

(clojure.spec.alpha/def :gql.git-lab-specs.Group/fullName :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Group/fullPath :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Group/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Group/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Group/path :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Group/projects :gql.git-lab-specs/ProjectConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Group/userPermissions
  :gql.git-lab-specs/GroupPermissions)

(clojure.spec.alpha/def :gql.git-lab-specs.Group/webUrl :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.GroupPermissions/readGroup :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/author :gql.git-lab-specs/User)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/confidential :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/createdAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/discussionLocked :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/discussions
  :gql.git-lab-specs/DiscussionConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/downvotes :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/iid :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/notes :gql.git-lab-specs/NoteConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/reference :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/state :gql.git-lab-specs/IssueState)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/subscribed :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/taskCompletionStatus
  :gql.git-lab-specs/TaskCompletionStatus)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/timeEstimate :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/title :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/totalTimeSpent :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/updatedAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/upvotes :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/userNotesCount :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/userPermissions
  :gql.git-lab-specs/IssuePermissions)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/webPath :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Issue/webUrl :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.IssueConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.IssueEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions/adminIssue :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions/createNote :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions/readIssue :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions/reopenIssue :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.IssuePermissions/updateIssue :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialInput/confidential
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialInput/iid :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetConfidentialInput/projectPath
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDateInput/dueDate :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDateInput/iid :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.IssueSetDueDateInput/projectPath :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Label/color :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Label/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Label/textColor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Label/title :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.LabelConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.LabelEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MarkAsSpamSnippetInput/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/createdAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/discussionLocked :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/discussions
  :gql.git-lab-specs/DiscussionConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/downvotes :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/iid :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/mergeOngoing :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/notes :gql.git-lab-specs/NoteConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/pipelines
  :gql.git-lab-specs/PipelineConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/project :gql.git-lab-specs/Project)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/projectId :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/rebaseInProgress :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/reference :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/shouldBeRebased :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/sourceBranch :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/sourceBranchExists
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/state :gql.git-lab-specs/MergeRequestState)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/subscribed :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/targetBranch :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/targetProject :gql.git-lab-specs/Project)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/targetProjectId :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/taskCompletionStatus
  :gql.git-lab-specs/TaskCompletionStatus)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/timeEstimate :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/title :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/totalTimeSpent :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/updatedAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/upvotes :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/userPermissions
  :gql.git-lab-specs/MergeRequestPermissions)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequest/workInProgress :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestConnection/pageInfo
  :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/adminMergeRequest
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/cherryPickOnCurrentMergeRequest
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/createNote
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/pushToSourceBranch
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/readMergeRequest
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/removeSourceBranch
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/revertOnCurrentMergeRequest
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestPermissions/updateMergeRequest
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesInput/iid
  :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetAssigneesInput/projectPath
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsInput/iid :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLabelsInput/projectPath
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedInput/iid :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedInput/locked
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetLockedInput/projectPath
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestoneInput/iid
  :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetMilestoneInput/projectPath
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionInput/iid
  :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionInput/projectPath
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetSubscriptionInput/subscribedState
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipInput/iid :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipInput/projectPath
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.MergeRequestSetWipInput/wip :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Metadata/revision :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Metadata/version :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/createdAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/state :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/title :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Milestone/updatedAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.addAwardEmoji/input
  :gql.git-lab-specs/AddAwardEmojiInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.createDiffNote/input
  :gql.git-lab-specs/CreateDiffNoteInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.createImageDiffNote/input
  :gql.git-lab-specs/CreateImageDiffNoteInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.createNote/input
  :gql.git-lab-specs/CreateNoteInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.createSnippet/input
  :gql.git-lab-specs/CreateSnippetInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.destroyNote/input
  :gql.git-lab-specs/DestroyNoteInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.destroySnippet/input
  :gql.git-lab-specs/DestroySnippetInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.issueSetConfidential/input
  :gql.git-lab-specs/IssueSetConfidentialInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.issueSetDueDate/input
  :gql.git-lab-specs/IssueSetDueDateInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.markAsSpamSnippet/input
  :gql.git-lab-specs/MarkAsSpamSnippetInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetAssignees/input
  :gql.git-lab-specs/MergeRequestSetAssigneesInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetLabels/input
  :gql.git-lab-specs/MergeRequestSetLabelsInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetLocked/input
  :gql.git-lab-specs/MergeRequestSetLockedInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetMilestone/input
  :gql.git-lab-specs/MergeRequestSetMilestoneInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetSubscription/input
  :gql.git-lab-specs/MergeRequestSetSubscriptionInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.mergeRequestSetWip/input
  :gql.git-lab-specs/MergeRequestSetWipInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.removeAwardEmoji/input
  :gql.git-lab-specs/RemoveAwardEmojiInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.todoMarkDone/input
  :gql.git-lab-specs/TodoMarkDoneInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.todoRestore/input
  :gql.git-lab-specs/TodoRestoreInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.todosMarkAllDone/input
  :gql.git-lab-specs/TodosMarkAllDoneInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.toggleAwardEmoji/input
  :gql.git-lab-specs/ToggleAwardEmojiInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.updateNote/input
  :gql.git-lab-specs/UpdateNoteInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Mutation.updateSnippet/input
  :gql.git-lab-specs/UpdateSnippetInput)

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/fullName :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/fullPath :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/path :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Namespace/projects :gql.git-lab-specs/ProjectConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Note/author :gql.git-lab-specs/User)

(clojure.spec.alpha/def :gql.git-lab-specs.Note/body :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Note/createdAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Note/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Note/resolvable :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Note/system :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Note/updatedAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Note/userPermissions :gql.git-lab-specs/NotePermissions)

(clojure.spec.alpha/def :gql.git-lab-specs.NoteConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.NoteEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions/adminNote :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions/awardEmoji :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions/createNote :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions/readNote :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.NotePermissions/resolveNote :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable/discussions
  :gql.git-lab-specs/DiscussionConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Noteable/notes :gql.git-lab-specs/NoteConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo/hasNextPage :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.PageInfo/hasPreviousPage :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/createdAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/detailedStatus
  :gql.git-lab-specs/DetailedStatus)

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/iid :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/sha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/status :gql.git-lab-specs/PipelineStatusEnum)

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/updatedAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Pipeline/userPermissions
  :gql.git-lab-specs/PipelinePermissions)

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.PipelineEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.PipelinePermissions/adminPipeline
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.PipelinePermissions/destroyPipeline
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.PipelinePermissions/updatePipeline
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Project/forksCount :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Project/fullPath :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Project/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Project/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Project/nameWithNamespace :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Project/path :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Project/starCount :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Project/userPermissions
  :gql.git-lab-specs/ProjectPermissions)

(clojure.spec.alpha/def :gql.git-lab-specs.Project.sentryDetailedError/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/adminOperations
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/adminProject
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/adminRemoteMirror
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/adminWiki :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/archiveProject
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/changeNamespace
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/changeVisibilityLevel
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createDeployment
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createIssue
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createLabel
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createMergeRequestFrom
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createMergeRequestIn
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createPages
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createPipeline
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createPipelineSchedule
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createSnippet
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/createWiki :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/destroyPages
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/destroyWiki
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/downloadCode
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/downloadWikiCode
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/forkProject
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/pushCode :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/pushToDeleteProtectedBranch
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/readCommitStatus
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/readCycleAnalytics
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/readPagesContent
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/readProject
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/readProjectMember
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/readWiki :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/removeForkProject
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/removePages
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/removeProject
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/renameProject
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/requestAccess
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/updatePages
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/updateWiki :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectPermissions/uploadFile :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics/buildArtifactsSize
  :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics/commitCount :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics/lfsObjectsSize :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics/packagesSize :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics/repositorySize :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.ProjectStatistics/storageSize :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Query/echo :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Query.echo/text :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Query.group/fullPath :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Query.namespace/fullPath :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Query.project/fullPath :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiInput/awardableId :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.RemoveAwardEmojiInput/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Repository/empty :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Repository/exists :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics/buildArtifactsSize
  :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics/lfsObjectsSize
  :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics/packagesSize
  :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics/repositorySize
  :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics/storageSize :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.RootStorageStatistics/wikiSize :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/count :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/culprit :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/externalUrl
  :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/firstSeen :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/lastSeen :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/sentryId :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/sentryProjectId
  :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/sentryProjectName
  :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/sentryProjectSlug
  :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/shortId :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/status
  :gql.git-lab-specs/SentryErrorStatus)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/title :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/type :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryDetailedError/userCount :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorFrequency/count :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.SentryErrorFrequency/time :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/author :gql.git-lab-specs/User)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/content :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/createdAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/discussions
  :gql.git-lab-specs/DiscussionConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/notes :gql.git-lab-specs/NoteConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/rawUrl :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/title :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/updatedAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/userPermissions
  :gql.git-lab-specs/SnippetPermissions)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/visibilityLevel
  :gql.git-lab-specs/VisibilityLevelsEnum)

(clojure.spec.alpha/def :gql.git-lab-specs.Snippet/webUrl :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions/adminSnippet
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions/awardEmoji :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions/createNote :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions/readSnippet
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions/reportSnippet
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.SnippetPermissions/updateSnippet
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/flatPath :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/path :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/sha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Submodule/type :gql.git-lab-specs/EntryType)

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.SubmoduleEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.TaskCompletionStatus/completedCount
  :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.TaskCompletionStatus/count :gql.git-lab-specs/Int)

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/action :gql.git-lab-specs/TodoActionEnum)

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/author :gql.git-lab-specs/User)

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/body :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/createdAt :gql.git-lab-specs/Time)

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/state :gql.git-lab-specs/TodoStateEnum)

(clojure.spec.alpha/def :gql.git-lab-specs.Todo/targetType :gql.git-lab-specs/TodoTargetEnum)

(clojure.spec.alpha/def :gql.git-lab-specs.TodoConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.TodoEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDoneInput/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.TodoMarkDonePayload/todo :gql.git-lab-specs/Todo)

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestoreInput/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.TodoRestorePayload/todo :gql.git-lab-specs/Todo)

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiInput/awardableId :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiInput/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.ToggleAwardEmojiPayload/toggledOn
  :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.Tree/blobs :gql.git-lab-specs/BlobConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Tree/submodules :gql.git-lab-specs/SubmoduleConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.Tree/trees :gql.git-lab-specs/TreeEntryConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry/flatPath :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry/path :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry/sha :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntry/type :gql.git-lab-specs/EntryType)

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.TreeEntryEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNoteInput/body :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateNoteInput/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.UpdateSnippetInput/id :gql.git-lab-specs/ID)

(clojure.spec.alpha/def :gql.git-lab-specs.User/avatarUrl :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.User/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.User/todos :gql.git-lab-specs/TodoConnection)

(clojure.spec.alpha/def :gql.git-lab-specs.User/userPermissions :gql.git-lab-specs/UserPermissions)

(clojure.spec.alpha/def :gql.git-lab-specs.User/username :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.User/webUrl :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.UserConnection/pageInfo :gql.git-lab-specs/PageInfo)

(clojure.spec.alpha/def :gql.git-lab-specs.UserEdge/cursor :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.UserPermissions/createSnippet :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive/onField :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive/onFragment :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.__Directive/onOperation :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue/isDeprecated :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.__EnumValue/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.__Field/isDeprecated :gql.git-lab-specs/Boolean)

(clojure.spec.alpha/def :gql.git-lab-specs.__Field/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.__Field/type :gql.git-lab-specs/__Type)

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue/name :gql.git-lab-specs/String)

(clojure.spec.alpha/def :gql.git-lab-specs.__InputValue/type :gql.git-lab-specs/__Type)

(clojure.spec.alpha/def :gql.git-lab-specs.__Schema/queryType :gql.git-lab-specs/__Type)

(clojure.spec.alpha/def :gql.git-lab-specs.__Type/kind :gql.git-lab-specs/__TypeKind)
